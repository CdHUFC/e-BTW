
eBTW2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002830  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800293c  0800293c  0001293c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a74  08002a74  000200b8  2**0
                  CONTENTS
  4 .ARM          00000000  08002a74  08002a74  000200b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a74  08002a74  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a74  08002a74  00012a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a78  08002a78  00012a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08002a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  200000b8  08002b34  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08002b34  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a19  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001aba  00000000  00000000  00029afa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a10  00000000  00000000  0002b5b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000930  00000000  00000000  0002bfc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014f9d  00000000  00000000  0002c8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008323  00000000  00000000  00041895  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00070faf  00000000  00000000  00049bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bab67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002968  00000000  00000000  000babe4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b8 	.word	0x200000b8
 8000128:	00000000 	.word	0x00000000
 800012c:	08002924 	.word	0x08002924

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000bc 	.word	0x200000bc
 8000148:	08002924 	.word	0x08002924

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029a:	f1a4 0401 	sub.w	r4, r4, #1
 800029e:	d1e9      	bne.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__gedf2>:
 80004d4:	f04f 3cff 	mov.w	ip, #4294967295
 80004d8:	e006      	b.n	80004e8 <__cmpdf2+0x4>
 80004da:	bf00      	nop

080004dc <__ledf2>:
 80004dc:	f04f 0c01 	mov.w	ip, #1
 80004e0:	e002      	b.n	80004e8 <__cmpdf2+0x4>
 80004e2:	bf00      	nop

080004e4 <__cmpdf2>:
 80004e4:	f04f 0c01 	mov.w	ip, #1
 80004e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004f8:	bf18      	it	ne
 80004fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004fe:	d01b      	beq.n	8000538 <__cmpdf2+0x54>
 8000500:	b001      	add	sp, #4
 8000502:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000506:	bf0c      	ite	eq
 8000508:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800050c:	ea91 0f03 	teqne	r1, r3
 8000510:	bf02      	ittt	eq
 8000512:	ea90 0f02 	teqeq	r0, r2
 8000516:	2000      	moveq	r0, #0
 8000518:	4770      	bxeq	lr
 800051a:	f110 0f00 	cmn.w	r0, #0
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf58      	it	pl
 8000524:	4299      	cmppl	r1, r3
 8000526:	bf08      	it	eq
 8000528:	4290      	cmpeq	r0, r2
 800052a:	bf2c      	ite	cs
 800052c:	17d8      	asrcs	r0, r3, #31
 800052e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000532:	f040 0001 	orr.w	r0, r0, #1
 8000536:	4770      	bx	lr
 8000538:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800053c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000540:	d102      	bne.n	8000548 <__cmpdf2+0x64>
 8000542:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000546:	d107      	bne.n	8000558 <__cmpdf2+0x74>
 8000548:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800054c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000550:	d1d6      	bne.n	8000500 <__cmpdf2+0x1c>
 8000552:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000556:	d0d3      	beq.n	8000500 <__cmpdf2+0x1c>
 8000558:	f85d 0b04 	ldr.w	r0, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__aeabi_cdrcmple>:
 8000560:	4684      	mov	ip, r0
 8000562:	4610      	mov	r0, r2
 8000564:	4662      	mov	r2, ip
 8000566:	468c      	mov	ip, r1
 8000568:	4619      	mov	r1, r3
 800056a:	4663      	mov	r3, ip
 800056c:	e000      	b.n	8000570 <__aeabi_cdcmpeq>
 800056e:	bf00      	nop

08000570 <__aeabi_cdcmpeq>:
 8000570:	b501      	push	{r0, lr}
 8000572:	f7ff ffb7 	bl	80004e4 <__cmpdf2>
 8000576:	2800      	cmp	r0, #0
 8000578:	bf48      	it	mi
 800057a:	f110 0f00 	cmnmi.w	r0, #0
 800057e:	bd01      	pop	{r0, pc}

08000580 <__aeabi_dcmpeq>:
 8000580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000584:	f7ff fff4 	bl	8000570 <__aeabi_cdcmpeq>
 8000588:	bf0c      	ite	eq
 800058a:	2001      	moveq	r0, #1
 800058c:	2000      	movne	r0, #0
 800058e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000592:	bf00      	nop

08000594 <__aeabi_dcmplt>:
 8000594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000598:	f7ff ffea 	bl	8000570 <__aeabi_cdcmpeq>
 800059c:	bf34      	ite	cc
 800059e:	2001      	movcc	r0, #1
 80005a0:	2000      	movcs	r0, #0
 80005a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005a6:	bf00      	nop

080005a8 <__aeabi_dcmple>:
 80005a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ac:	f7ff ffe0 	bl	8000570 <__aeabi_cdcmpeq>
 80005b0:	bf94      	ite	ls
 80005b2:	2001      	movls	r0, #1
 80005b4:	2000      	movhi	r0, #0
 80005b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ba:	bf00      	nop

080005bc <__aeabi_dcmpge>:
 80005bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c0:	f7ff ffce 	bl	8000560 <__aeabi_cdrcmple>
 80005c4:	bf94      	ite	ls
 80005c6:	2001      	movls	r0, #1
 80005c8:	2000      	movhi	r0, #0
 80005ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ce:	bf00      	nop

080005d0 <__aeabi_dcmpgt>:
 80005d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d4:	f7ff ffc4 	bl	8000560 <__aeabi_cdrcmple>
 80005d8:	bf34      	ite	cc
 80005da:	2001      	movcc	r0, #1
 80005dc:	2000      	movcs	r0, #0
 80005de:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e2:	bf00      	nop

080005e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <HAL_Init+0x28>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a07      	ldr	r2, [pc, #28]	; (800060c <HAL_Init+0x28>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 f945 	bl	8000884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f000 f808 	bl	8000610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000600:	f001 ff60 	bl	80024c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40022000 	.word	0x40022000

08000610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <HAL_InitTick+0x54>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <HAL_InitTick+0x58>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	4619      	mov	r1, r3
 8000622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000626:	fbb3 f3f1 	udiv	r3, r3, r1
 800062a:	fbb2 f3f3 	udiv	r3, r2, r3
 800062e:	4618      	mov	r0, r3
 8000630:	f000 f95d 	bl	80008ee <HAL_SYSTICK_Config>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
 800063c:	e00e      	b.n	800065c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b0f      	cmp	r3, #15
 8000642:	d80a      	bhi.n	800065a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000644:	2200      	movs	r2, #0
 8000646:	6879      	ldr	r1, [r7, #4]
 8000648:	f04f 30ff 	mov.w	r0, #4294967295
 800064c:	f000 f925 	bl	800089a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000650:	4a06      	ldr	r2, [pc, #24]	; (800066c <HAL_InitTick+0x5c>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000656:	2300      	movs	r3, #0
 8000658:	e000      	b.n	800065c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800065a:	2301      	movs	r3, #1
}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200000b4 	.word	0x200000b4
 8000668:	20000004 	.word	0x20000004
 800066c:	20000000 	.word	0x20000000

08000670 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <HAL_IncTick+0x1c>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	461a      	mov	r2, r3
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <HAL_IncTick+0x20>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4413      	add	r3, r2
 8000680:	4a03      	ldr	r2, [pc, #12]	; (8000690 <HAL_IncTick+0x20>)
 8000682:	6013      	str	r3, [r2, #0]
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr
 800068c:	20000004 	.word	0x20000004
 8000690:	200000dc 	.word	0x200000dc

08000694 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  return uwTick;
 8000698:	4b02      	ldr	r3, [pc, #8]	; (80006a4 <HAL_GetTick+0x10>)
 800069a:	681b      	ldr	r3, [r3, #0]
}
 800069c:	4618      	mov	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	200000dc 	.word	0x200000dc

080006a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006b0:	f7ff fff0 	bl	8000694 <HAL_GetTick>
 80006b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006c0:	d005      	beq.n	80006ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <HAL_Delay+0x40>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	461a      	mov	r2, r3
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	4413      	add	r3, r2
 80006cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006ce:	bf00      	nop
 80006d0:	f7ff ffe0 	bl	8000694 <HAL_GetTick>
 80006d4:	4602      	mov	r2, r0
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d8f7      	bhi.n	80006d0 <HAL_Delay+0x28>
  {
  }
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000004 	.word	0x20000004

080006ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <__NVIC_SetPriorityGrouping+0x44>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000708:	4013      	ands	r3, r2
 800070a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800071c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800071e:	4a04      	ldr	r2, [pc, #16]	; (8000730 <__NVIC_SetPriorityGrouping+0x44>)
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	60d3      	str	r3, [r2, #12]
}
 8000724:	bf00      	nop
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <__NVIC_GetPriorityGrouping+0x18>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	0a1b      	lsrs	r3, r3, #8
 800073e:	f003 0307 	and.w	r3, r3, #7
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	2b00      	cmp	r3, #0
 8000760:	db0b      	blt.n	800077a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	f003 021f 	and.w	r2, r3, #31
 8000768:	4906      	ldr	r1, [pc, #24]	; (8000784 <__NVIC_EnableIRQ+0x34>)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	095b      	lsrs	r3, r3, #5
 8000770:	2001      	movs	r0, #1
 8000772:	fa00 f202 	lsl.w	r2, r0, r2
 8000776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	e000e100 	.word	0xe000e100

08000788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	6039      	str	r1, [r7, #0]
 8000792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000798:	2b00      	cmp	r3, #0
 800079a:	db0a      	blt.n	80007b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	490c      	ldr	r1, [pc, #48]	; (80007d4 <__NVIC_SetPriority+0x4c>)
 80007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a6:	0112      	lsls	r2, r2, #4
 80007a8:	b2d2      	uxtb	r2, r2
 80007aa:	440b      	add	r3, r1
 80007ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007b0:	e00a      	b.n	80007c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4908      	ldr	r1, [pc, #32]	; (80007d8 <__NVIC_SetPriority+0x50>)
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	f003 030f 	and.w	r3, r3, #15
 80007be:	3b04      	subs	r3, #4
 80007c0:	0112      	lsls	r2, r2, #4
 80007c2:	b2d2      	uxtb	r2, r2
 80007c4:	440b      	add	r3, r1
 80007c6:	761a      	strb	r2, [r3, #24]
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000e100 	.word	0xe000e100
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007dc:	b480      	push	{r7}
 80007de:	b089      	sub	sp, #36	; 0x24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	f003 0307 	and.w	r3, r3, #7
 80007ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007f0:	69fb      	ldr	r3, [r7, #28]
 80007f2:	f1c3 0307 	rsb	r3, r3, #7
 80007f6:	2b04      	cmp	r3, #4
 80007f8:	bf28      	it	cs
 80007fa:	2304      	movcs	r3, #4
 80007fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3304      	adds	r3, #4
 8000802:	2b06      	cmp	r3, #6
 8000804:	d902      	bls.n	800080c <NVIC_EncodePriority+0x30>
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	3b03      	subs	r3, #3
 800080a:	e000      	b.n	800080e <NVIC_EncodePriority+0x32>
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000810:	f04f 32ff 	mov.w	r2, #4294967295
 8000814:	69bb      	ldr	r3, [r7, #24]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	43da      	mvns	r2, r3
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	401a      	ands	r2, r3
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000824:	f04f 31ff 	mov.w	r1, #4294967295
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	fa01 f303 	lsl.w	r3, r1, r3
 800082e:	43d9      	mvns	r1, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000834:	4313      	orrs	r3, r2
         );
}
 8000836:	4618      	mov	r0, r3
 8000838:	3724      	adds	r7, #36	; 0x24
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr

08000840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b01      	subs	r3, #1
 800084c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000850:	d301      	bcc.n	8000856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000852:	2301      	movs	r3, #1
 8000854:	e00f      	b.n	8000876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <SysTick_Config+0x40>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3b01      	subs	r3, #1
 800085c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085e:	210f      	movs	r1, #15
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	f7ff ff90 	bl	8000788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <SysTick_Config+0x40>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <SysTick_Config+0x40>)
 8000870:	2207      	movs	r2, #7
 8000872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	e000e010 	.word	0xe000e010

08000884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff ff2d 	bl	80006ec <__NVIC_SetPriorityGrouping>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800089a:	b580      	push	{r7, lr}
 800089c:	b086      	sub	sp, #24
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	60b9      	str	r1, [r7, #8]
 80008a4:	607a      	str	r2, [r7, #4]
 80008a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008ac:	f7ff ff42 	bl	8000734 <__NVIC_GetPriorityGrouping>
 80008b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	68b9      	ldr	r1, [r7, #8]
 80008b6:	6978      	ldr	r0, [r7, #20]
 80008b8:	f7ff ff90 	bl	80007dc <NVIC_EncodePriority>
 80008bc:	4602      	mov	r2, r0
 80008be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c2:	4611      	mov	r1, r2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ff5f 	bl	8000788 <__NVIC_SetPriority>
}
 80008ca:	bf00      	nop
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	4603      	mov	r3, r0
 80008da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff35 	bl	8000750 <__NVIC_EnableIRQ>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff ffa2 	bl	8000840 <SysTick_Config>
 80008fc:	4603      	mov	r3, r0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000908:	b480      	push	{r7}
 800090a:	b08b      	sub	sp, #44	; 0x2c
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800091a:	e127      	b.n	8000b6c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800091c:	2201      	movs	r2, #1
 800091e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	69fa      	ldr	r2, [r7, #28]
 800092c:	4013      	ands	r3, r2
 800092e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	429a      	cmp	r2, r3
 8000936:	f040 8116 	bne.w	8000b66 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	2b12      	cmp	r3, #18
 8000940:	d034      	beq.n	80009ac <HAL_GPIO_Init+0xa4>
 8000942:	2b12      	cmp	r3, #18
 8000944:	d80d      	bhi.n	8000962 <HAL_GPIO_Init+0x5a>
 8000946:	2b02      	cmp	r3, #2
 8000948:	d02b      	beq.n	80009a2 <HAL_GPIO_Init+0x9a>
 800094a:	2b02      	cmp	r3, #2
 800094c:	d804      	bhi.n	8000958 <HAL_GPIO_Init+0x50>
 800094e:	2b00      	cmp	r3, #0
 8000950:	d031      	beq.n	80009b6 <HAL_GPIO_Init+0xae>
 8000952:	2b01      	cmp	r3, #1
 8000954:	d01c      	beq.n	8000990 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000956:	e048      	b.n	80009ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000958:	2b03      	cmp	r3, #3
 800095a:	d043      	beq.n	80009e4 <HAL_GPIO_Init+0xdc>
 800095c:	2b11      	cmp	r3, #17
 800095e:	d01b      	beq.n	8000998 <HAL_GPIO_Init+0x90>
          break;
 8000960:	e043      	b.n	80009ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000962:	4a89      	ldr	r2, [pc, #548]	; (8000b88 <HAL_GPIO_Init+0x280>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d026      	beq.n	80009b6 <HAL_GPIO_Init+0xae>
 8000968:	4a87      	ldr	r2, [pc, #540]	; (8000b88 <HAL_GPIO_Init+0x280>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d806      	bhi.n	800097c <HAL_GPIO_Init+0x74>
 800096e:	4a87      	ldr	r2, [pc, #540]	; (8000b8c <HAL_GPIO_Init+0x284>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d020      	beq.n	80009b6 <HAL_GPIO_Init+0xae>
 8000974:	4a86      	ldr	r2, [pc, #536]	; (8000b90 <HAL_GPIO_Init+0x288>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d01d      	beq.n	80009b6 <HAL_GPIO_Init+0xae>
          break;
 800097a:	e036      	b.n	80009ea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800097c:	4a85      	ldr	r2, [pc, #532]	; (8000b94 <HAL_GPIO_Init+0x28c>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d019      	beq.n	80009b6 <HAL_GPIO_Init+0xae>
 8000982:	4a85      	ldr	r2, [pc, #532]	; (8000b98 <HAL_GPIO_Init+0x290>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d016      	beq.n	80009b6 <HAL_GPIO_Init+0xae>
 8000988:	4a84      	ldr	r2, [pc, #528]	; (8000b9c <HAL_GPIO_Init+0x294>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d013      	beq.n	80009b6 <HAL_GPIO_Init+0xae>
          break;
 800098e:	e02c      	b.n	80009ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	623b      	str	r3, [r7, #32]
          break;
 8000996:	e028      	b.n	80009ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	3304      	adds	r3, #4
 800099e:	623b      	str	r3, [r7, #32]
          break;
 80009a0:	e023      	b.n	80009ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	68db      	ldr	r3, [r3, #12]
 80009a6:	3308      	adds	r3, #8
 80009a8:	623b      	str	r3, [r7, #32]
          break;
 80009aa:	e01e      	b.n	80009ea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	330c      	adds	r3, #12
 80009b2:	623b      	str	r3, [r7, #32]
          break;
 80009b4:	e019      	b.n	80009ea <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d102      	bne.n	80009c4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009be:	2304      	movs	r3, #4
 80009c0:	623b      	str	r3, [r7, #32]
          break;
 80009c2:	e012      	b.n	80009ea <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d105      	bne.n	80009d8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009cc:	2308      	movs	r3, #8
 80009ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	69fa      	ldr	r2, [r7, #28]
 80009d4:	611a      	str	r2, [r3, #16]
          break;
 80009d6:	e008      	b.n	80009ea <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009d8:	2308      	movs	r3, #8
 80009da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	69fa      	ldr	r2, [r7, #28]
 80009e0:	615a      	str	r2, [r3, #20]
          break;
 80009e2:	e002      	b.n	80009ea <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
          break;
 80009e8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	2bff      	cmp	r3, #255	; 0xff
 80009ee:	d801      	bhi.n	80009f4 <HAL_GPIO_Init+0xec>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	e001      	b.n	80009f8 <HAL_GPIO_Init+0xf0>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3304      	adds	r3, #4
 80009f8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	2bff      	cmp	r3, #255	; 0xff
 80009fe:	d802      	bhi.n	8000a06 <HAL_GPIO_Init+0xfe>
 8000a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	e002      	b.n	8000a0c <HAL_GPIO_Init+0x104>
 8000a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a08:	3b08      	subs	r3, #8
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	210f      	movs	r1, #15
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	401a      	ands	r2, r3
 8000a1e:	6a39      	ldr	r1, [r7, #32]
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	fa01 f303 	lsl.w	r3, r1, r3
 8000a26:	431a      	orrs	r2, r3
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	f000 8096 	beq.w	8000b66 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a3a:	4b59      	ldr	r3, [pc, #356]	; (8000ba0 <HAL_GPIO_Init+0x298>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	4a58      	ldr	r2, [pc, #352]	; (8000ba0 <HAL_GPIO_Init+0x298>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6193      	str	r3, [r2, #24]
 8000a46:	4b56      	ldr	r3, [pc, #344]	; (8000ba0 <HAL_GPIO_Init+0x298>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a52:	4a54      	ldr	r2, [pc, #336]	; (8000ba4 <HAL_GPIO_Init+0x29c>)
 8000a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a56:	089b      	lsrs	r3, r3, #2
 8000a58:	3302      	adds	r3, #2
 8000a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a62:	f003 0303 	and.w	r3, r3, #3
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	220f      	movs	r2, #15
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	4013      	ands	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a4b      	ldr	r2, [pc, #300]	; (8000ba8 <HAL_GPIO_Init+0x2a0>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d013      	beq.n	8000aa6 <HAL_GPIO_Init+0x19e>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a4a      	ldr	r2, [pc, #296]	; (8000bac <HAL_GPIO_Init+0x2a4>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d00d      	beq.n	8000aa2 <HAL_GPIO_Init+0x19a>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a49      	ldr	r2, [pc, #292]	; (8000bb0 <HAL_GPIO_Init+0x2a8>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d007      	beq.n	8000a9e <HAL_GPIO_Init+0x196>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a48      	ldr	r2, [pc, #288]	; (8000bb4 <HAL_GPIO_Init+0x2ac>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d101      	bne.n	8000a9a <HAL_GPIO_Init+0x192>
 8000a96:	2303      	movs	r3, #3
 8000a98:	e006      	b.n	8000aa8 <HAL_GPIO_Init+0x1a0>
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	e004      	b.n	8000aa8 <HAL_GPIO_Init+0x1a0>
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	e002      	b.n	8000aa8 <HAL_GPIO_Init+0x1a0>
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e000      	b.n	8000aa8 <HAL_GPIO_Init+0x1a0>
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aaa:	f002 0203 	and.w	r2, r2, #3
 8000aae:	0092      	lsls	r2, r2, #2
 8000ab0:	4093      	lsls	r3, r2
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ab8:	493a      	ldr	r1, [pc, #232]	; (8000ba4 <HAL_GPIO_Init+0x29c>)
 8000aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abc:	089b      	lsrs	r3, r3, #2
 8000abe:	3302      	adds	r3, #2
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d006      	beq.n	8000ae0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ad2:	4b39      	ldr	r3, [pc, #228]	; (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	4938      	ldr	r1, [pc, #224]	; (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	600b      	str	r3, [r1, #0]
 8000ade:	e006      	b.n	8000aee <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ae0:	4b35      	ldr	r3, [pc, #212]	; (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	4933      	ldr	r1, [pc, #204]	; (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000aea:	4013      	ands	r3, r2
 8000aec:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d006      	beq.n	8000b08 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000afa:	4b2f      	ldr	r3, [pc, #188]	; (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	492e      	ldr	r1, [pc, #184]	; (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	604b      	str	r3, [r1, #4]
 8000b06:	e006      	b.n	8000b16 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b08:	4b2b      	ldr	r3, [pc, #172]	; (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000b0a:	685a      	ldr	r2, [r3, #4]
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	4929      	ldr	r1, [pc, #164]	; (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000b12:	4013      	ands	r3, r2
 8000b14:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d006      	beq.n	8000b30 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b22:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000b24:	689a      	ldr	r2, [r3, #8]
 8000b26:	4924      	ldr	r1, [pc, #144]	; (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	608b      	str	r3, [r1, #8]
 8000b2e:	e006      	b.n	8000b3e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b30:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000b32:	689a      	ldr	r2, [r3, #8]
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	491f      	ldr	r1, [pc, #124]	; (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d006      	beq.n	8000b58 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b4a:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000b4c:	68da      	ldr	r2, [r3, #12]
 8000b4e:	491a      	ldr	r1, [pc, #104]	; (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	60cb      	str	r3, [r1, #12]
 8000b56:	e006      	b.n	8000b66 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000b5a:	68da      	ldr	r2, [r3, #12]
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	4915      	ldr	r1, [pc, #84]	; (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000b62:	4013      	ands	r3, r2
 8000b64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	3301      	adds	r3, #1
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b72:	fa22 f303 	lsr.w	r3, r2, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f47f aed0 	bne.w	800091c <HAL_GPIO_Init+0x14>
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	372c      	adds	r7, #44	; 0x2c
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	10210000 	.word	0x10210000
 8000b8c:	10110000 	.word	0x10110000
 8000b90:	10120000 	.word	0x10120000
 8000b94:	10310000 	.word	0x10310000
 8000b98:	10320000 	.word	0x10320000
 8000b9c:	10220000 	.word	0x10220000
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40010000 	.word	0x40010000
 8000ba8:	40010800 	.word	0x40010800
 8000bac:	40010c00 	.word	0x40010c00
 8000bb0:	40011000 	.word	0x40011000
 8000bb4:	40011400 	.word	0x40011400
 8000bb8:	40010400 	.word	0x40010400

08000bbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	689a      	ldr	r2, [r3, #8]
 8000bcc:	887b      	ldrh	r3, [r7, #2]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d002      	beq.n	8000bda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	73fb      	strb	r3, [r7, #15]
 8000bd8:	e001      	b.n	8000bde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr

08000bea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	807b      	strh	r3, [r7, #2]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bfa:	787b      	ldrb	r3, [r7, #1]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d003      	beq.n	8000c08 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c00:	887a      	ldrh	r2, [r7, #2]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c06:	e003      	b.n	8000c10 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c08:	887b      	ldrh	r3, [r7, #2]
 8000c0a:	041a      	lsls	r2, r3, #16
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	611a      	str	r2, [r3, #16]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
	...

08000c1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c28:	695a      	ldr	r2, [r3, #20]
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d006      	beq.n	8000c40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c32:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f806 	bl	8000c4c <HAL_GPIO_EXTI_Callback>
  }
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40010400 	.word	0x40010400

08000c4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d101      	bne.n	8000c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e26c      	b.n	800114c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f000 8087 	beq.w	8000d8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c80:	4b92      	ldr	r3, [pc, #584]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 030c 	and.w	r3, r3, #12
 8000c88:	2b04      	cmp	r3, #4
 8000c8a:	d00c      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c8c:	4b8f      	ldr	r3, [pc, #572]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 030c 	and.w	r3, r3, #12
 8000c94:	2b08      	cmp	r3, #8
 8000c96:	d112      	bne.n	8000cbe <HAL_RCC_OscConfig+0x5e>
 8000c98:	4b8c      	ldr	r3, [pc, #560]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ca4:	d10b      	bne.n	8000cbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca6:	4b89      	ldr	r3, [pc, #548]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d06c      	beq.n	8000d8c <HAL_RCC_OscConfig+0x12c>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d168      	bne.n	8000d8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e246      	b.n	800114c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cc6:	d106      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x76>
 8000cc8:	4b80      	ldr	r3, [pc, #512]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a7f      	ldr	r2, [pc, #508]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cd2:	6013      	str	r3, [r2, #0]
 8000cd4:	e02e      	b.n	8000d34 <HAL_RCC_OscConfig+0xd4>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d10c      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x98>
 8000cde:	4b7b      	ldr	r3, [pc, #492]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a7a      	ldr	r2, [pc, #488]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	4b78      	ldr	r3, [pc, #480]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a77      	ldr	r2, [pc, #476]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	e01d      	b.n	8000d34 <HAL_RCC_OscConfig+0xd4>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d00:	d10c      	bne.n	8000d1c <HAL_RCC_OscConfig+0xbc>
 8000d02:	4b72      	ldr	r3, [pc, #456]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a71      	ldr	r2, [pc, #452]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	4b6f      	ldr	r3, [pc, #444]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a6e      	ldr	r2, [pc, #440]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	e00b      	b.n	8000d34 <HAL_RCC_OscConfig+0xd4>
 8000d1c:	4b6b      	ldr	r3, [pc, #428]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a6a      	ldr	r2, [pc, #424]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	4b68      	ldr	r3, [pc, #416]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a67      	ldr	r2, [pc, #412]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d013      	beq.n	8000d64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d3c:	f7ff fcaa 	bl	8000694 <HAL_GetTick>
 8000d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d42:	e008      	b.n	8000d56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d44:	f7ff fca6 	bl	8000694 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	2b64      	cmp	r3, #100	; 0x64
 8000d50:	d901      	bls.n	8000d56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d52:	2303      	movs	r3, #3
 8000d54:	e1fa      	b.n	800114c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d56:	4b5d      	ldr	r3, [pc, #372]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d0f0      	beq.n	8000d44 <HAL_RCC_OscConfig+0xe4>
 8000d62:	e014      	b.n	8000d8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d64:	f7ff fc96 	bl	8000694 <HAL_GetTick>
 8000d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d6a:	e008      	b.n	8000d7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d6c:	f7ff fc92 	bl	8000694 <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b64      	cmp	r3, #100	; 0x64
 8000d78:	d901      	bls.n	8000d7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e1e6      	b.n	800114c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d7e:	4b53      	ldr	r3, [pc, #332]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1f0      	bne.n	8000d6c <HAL_RCC_OscConfig+0x10c>
 8000d8a:	e000      	b.n	8000d8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d063      	beq.n	8000e62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d9a:	4b4c      	ldr	r3, [pc, #304]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 030c 	and.w	r3, r3, #12
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d00b      	beq.n	8000dbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000da6:	4b49      	ldr	r3, [pc, #292]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 030c 	and.w	r3, r3, #12
 8000dae:	2b08      	cmp	r3, #8
 8000db0:	d11c      	bne.n	8000dec <HAL_RCC_OscConfig+0x18c>
 8000db2:	4b46      	ldr	r3, [pc, #280]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d116      	bne.n	8000dec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dbe:	4b43      	ldr	r3, [pc, #268]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d005      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x176>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d001      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e1ba      	b.n	800114c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dd6:	4b3d      	ldr	r3, [pc, #244]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	4939      	ldr	r1, [pc, #228]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000de6:	4313      	orrs	r3, r2
 8000de8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dea:	e03a      	b.n	8000e62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	691b      	ldr	r3, [r3, #16]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d020      	beq.n	8000e36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000df4:	4b36      	ldr	r3, [pc, #216]	; (8000ed0 <HAL_RCC_OscConfig+0x270>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dfa:	f7ff fc4b 	bl	8000694 <HAL_GetTick>
 8000dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e00:	e008      	b.n	8000e14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e02:	f7ff fc47 	bl	8000694 <HAL_GetTick>
 8000e06:	4602      	mov	r2, r0
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d901      	bls.n	8000e14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e10:	2303      	movs	r3, #3
 8000e12:	e19b      	b.n	800114c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e14:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d0f0      	beq.n	8000e02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e20:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	695b      	ldr	r3, [r3, #20]
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	4927      	ldr	r1, [pc, #156]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000e30:	4313      	orrs	r3, r2
 8000e32:	600b      	str	r3, [r1, #0]
 8000e34:	e015      	b.n	8000e62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e36:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <HAL_RCC_OscConfig+0x270>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3c:	f7ff fc2a 	bl	8000694 <HAL_GetTick>
 8000e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e42:	e008      	b.n	8000e56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e44:	f7ff fc26 	bl	8000694 <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d901      	bls.n	8000e56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e17a      	b.n	800114c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f0      	bne.n	8000e44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d03a      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d019      	beq.n	8000eaa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e76:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e7c:	f7ff fc0a 	bl	8000694 <HAL_GetTick>
 8000e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e82:	e008      	b.n	8000e96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e84:	f7ff fc06 	bl	8000694 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e15a      	b.n	800114c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <HAL_RCC_OscConfig+0x26c>)
 8000e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f0      	beq.n	8000e84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f000 faa8 	bl	80013f8 <RCC_Delay>
 8000ea8:	e01c      	b.n	8000ee4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb0:	f7ff fbf0 	bl	8000694 <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb6:	e00f      	b.n	8000ed8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eb8:	f7ff fbec 	bl	8000694 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d908      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e140      	b.n	800114c <HAL_RCC_OscConfig+0x4ec>
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	42420000 	.word	0x42420000
 8000ed4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ed8:	4b9e      	ldr	r3, [pc, #632]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8000eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1e9      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	f000 80a6 	beq.w	800103e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ef6:	4b97      	ldr	r3, [pc, #604]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d10d      	bne.n	8000f1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	4b94      	ldr	r3, [pc, #592]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	4a93      	ldr	r2, [pc, #588]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	61d3      	str	r3, [r2, #28]
 8000f0e:	4b91      	ldr	r3, [pc, #580]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1e:	4b8e      	ldr	r3, [pc, #568]	; (8001158 <HAL_RCC_OscConfig+0x4f8>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d118      	bne.n	8000f5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f2a:	4b8b      	ldr	r3, [pc, #556]	; (8001158 <HAL_RCC_OscConfig+0x4f8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a8a      	ldr	r2, [pc, #552]	; (8001158 <HAL_RCC_OscConfig+0x4f8>)
 8000f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f36:	f7ff fbad 	bl	8000694 <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f3e:	f7ff fba9 	bl	8000694 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b64      	cmp	r3, #100	; 0x64
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e0fd      	b.n	800114c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f50:	4b81      	ldr	r3, [pc, #516]	; (8001158 <HAL_RCC_OscConfig+0x4f8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0f0      	beq.n	8000f3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d106      	bne.n	8000f72 <HAL_RCC_OscConfig+0x312>
 8000f64:	4b7b      	ldr	r3, [pc, #492]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	4a7a      	ldr	r2, [pc, #488]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	6213      	str	r3, [r2, #32]
 8000f70:	e02d      	b.n	8000fce <HAL_RCC_OscConfig+0x36e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10c      	bne.n	8000f94 <HAL_RCC_OscConfig+0x334>
 8000f7a:	4b76      	ldr	r3, [pc, #472]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8000f7c:	6a1b      	ldr	r3, [r3, #32]
 8000f7e:	4a75      	ldr	r2, [pc, #468]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8000f80:	f023 0301 	bic.w	r3, r3, #1
 8000f84:	6213      	str	r3, [r2, #32]
 8000f86:	4b73      	ldr	r3, [pc, #460]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8000f88:	6a1b      	ldr	r3, [r3, #32]
 8000f8a:	4a72      	ldr	r2, [pc, #456]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8000f8c:	f023 0304 	bic.w	r3, r3, #4
 8000f90:	6213      	str	r3, [r2, #32]
 8000f92:	e01c      	b.n	8000fce <HAL_RCC_OscConfig+0x36e>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	2b05      	cmp	r3, #5
 8000f9a:	d10c      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x356>
 8000f9c:	4b6d      	ldr	r3, [pc, #436]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	4a6c      	ldr	r2, [pc, #432]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8000fa2:	f043 0304 	orr.w	r3, r3, #4
 8000fa6:	6213      	str	r3, [r2, #32]
 8000fa8:	4b6a      	ldr	r3, [pc, #424]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8000faa:	6a1b      	ldr	r3, [r3, #32]
 8000fac:	4a69      	ldr	r2, [pc, #420]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6213      	str	r3, [r2, #32]
 8000fb4:	e00b      	b.n	8000fce <HAL_RCC_OscConfig+0x36e>
 8000fb6:	4b67      	ldr	r3, [pc, #412]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8000fb8:	6a1b      	ldr	r3, [r3, #32]
 8000fba:	4a66      	ldr	r2, [pc, #408]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8000fbc:	f023 0301 	bic.w	r3, r3, #1
 8000fc0:	6213      	str	r3, [r2, #32]
 8000fc2:	4b64      	ldr	r3, [pc, #400]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8000fc4:	6a1b      	ldr	r3, [r3, #32]
 8000fc6:	4a63      	ldr	r2, [pc, #396]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8000fc8:	f023 0304 	bic.w	r3, r3, #4
 8000fcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d015      	beq.n	8001002 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd6:	f7ff fb5d 	bl	8000694 <HAL_GetTick>
 8000fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fdc:	e00a      	b.n	8000ff4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fde:	f7ff fb59 	bl	8000694 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e0ab      	b.n	800114c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff4:	4b57      	ldr	r3, [pc, #348]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0ee      	beq.n	8000fde <HAL_RCC_OscConfig+0x37e>
 8001000:	e014      	b.n	800102c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001002:	f7ff fb47 	bl	8000694 <HAL_GetTick>
 8001006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001008:	e00a      	b.n	8001020 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800100a:	f7ff fb43 	bl	8000694 <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	f241 3288 	movw	r2, #5000	; 0x1388
 8001018:	4293      	cmp	r3, r2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e095      	b.n	800114c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001020:	4b4c      	ldr	r3, [pc, #304]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8001022:	6a1b      	ldr	r3, [r3, #32]
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1ee      	bne.n	800100a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800102c:	7dfb      	ldrb	r3, [r7, #23]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d105      	bne.n	800103e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001032:	4b48      	ldr	r3, [pc, #288]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	4a47      	ldr	r2, [pc, #284]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8001038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800103c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 8081 	beq.w	800114a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001048:	4b42      	ldr	r3, [pc, #264]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 030c 	and.w	r3, r3, #12
 8001050:	2b08      	cmp	r3, #8
 8001052:	d061      	beq.n	8001118 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69db      	ldr	r3, [r3, #28]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d146      	bne.n	80010ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800105c:	4b3f      	ldr	r3, [pc, #252]	; (800115c <HAL_RCC_OscConfig+0x4fc>)
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001062:	f7ff fb17 	bl	8000694 <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001068:	e008      	b.n	800107c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800106a:	f7ff fb13 	bl	8000694 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e067      	b.n	800114c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800107c:	4b35      	ldr	r3, [pc, #212]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1f0      	bne.n	800106a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001090:	d108      	bne.n	80010a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001092:	4b30      	ldr	r3, [pc, #192]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	492d      	ldr	r1, [pc, #180]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 80010a0:	4313      	orrs	r3, r2
 80010a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010a4:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a19      	ldr	r1, [r3, #32]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b4:	430b      	orrs	r3, r1
 80010b6:	4927      	ldr	r1, [pc, #156]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 80010b8:	4313      	orrs	r3, r2
 80010ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <HAL_RCC_OscConfig+0x4fc>)
 80010be:	2201      	movs	r2, #1
 80010c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c2:	f7ff fae7 	bl	8000694 <HAL_GetTick>
 80010c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010c8:	e008      	b.n	80010dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ca:	f7ff fae3 	bl	8000694 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e037      	b.n	800114c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0f0      	beq.n	80010ca <HAL_RCC_OscConfig+0x46a>
 80010e8:	e02f      	b.n	800114a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <HAL_RCC_OscConfig+0x4fc>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fad0 	bl	8000694 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010f8:	f7ff facc 	bl	8000694 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e020      	b.n	800114c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0x498>
 8001116:	e018      	b.n	800114a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d101      	bne.n	8001124 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e013      	b.n	800114c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <HAL_RCC_OscConfig+0x4f4>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	429a      	cmp	r2, r3
 8001136:	d106      	bne.n	8001146 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001142:	429a      	cmp	r2, r3
 8001144:	d001      	beq.n	800114a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40021000 	.word	0x40021000
 8001158:	40007000 	.word	0x40007000
 800115c:	42420060 	.word	0x42420060

08001160 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e0d0      	b.n	8001316 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001174:	4b6a      	ldr	r3, [pc, #424]	; (8001320 <HAL_RCC_ClockConfig+0x1c0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	d910      	bls.n	80011a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001182:	4b67      	ldr	r3, [pc, #412]	; (8001320 <HAL_RCC_ClockConfig+0x1c0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f023 0207 	bic.w	r2, r3, #7
 800118a:	4965      	ldr	r1, [pc, #404]	; (8001320 <HAL_RCC_ClockConfig+0x1c0>)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	4313      	orrs	r3, r2
 8001190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001192:	4b63      	ldr	r3, [pc, #396]	; (8001320 <HAL_RCC_ClockConfig+0x1c0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	429a      	cmp	r2, r3
 800119e:	d001      	beq.n	80011a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e0b8      	b.n	8001316 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d020      	beq.n	80011f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d005      	beq.n	80011c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011bc:	4b59      	ldr	r3, [pc, #356]	; (8001324 <HAL_RCC_ClockConfig+0x1c4>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	4a58      	ldr	r2, [pc, #352]	; (8001324 <HAL_RCC_ClockConfig+0x1c4>)
 80011c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0308 	and.w	r3, r3, #8
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d005      	beq.n	80011e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011d4:	4b53      	ldr	r3, [pc, #332]	; (8001324 <HAL_RCC_ClockConfig+0x1c4>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	4a52      	ldr	r2, [pc, #328]	; (8001324 <HAL_RCC_ClockConfig+0x1c4>)
 80011da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011e0:	4b50      	ldr	r3, [pc, #320]	; (8001324 <HAL_RCC_ClockConfig+0x1c4>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	494d      	ldr	r1, [pc, #308]	; (8001324 <HAL_RCC_ClockConfig+0x1c4>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d040      	beq.n	8001280 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d107      	bne.n	8001216 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001206:	4b47      	ldr	r3, [pc, #284]	; (8001324 <HAL_RCC_ClockConfig+0x1c4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d115      	bne.n	800123e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e07f      	b.n	8001316 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b02      	cmp	r3, #2
 800121c:	d107      	bne.n	800122e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800121e:	4b41      	ldr	r3, [pc, #260]	; (8001324 <HAL_RCC_ClockConfig+0x1c4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d109      	bne.n	800123e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e073      	b.n	8001316 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122e:	4b3d      	ldr	r3, [pc, #244]	; (8001324 <HAL_RCC_ClockConfig+0x1c4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e06b      	b.n	8001316 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800123e:	4b39      	ldr	r3, [pc, #228]	; (8001324 <HAL_RCC_ClockConfig+0x1c4>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f023 0203 	bic.w	r2, r3, #3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	4936      	ldr	r1, [pc, #216]	; (8001324 <HAL_RCC_ClockConfig+0x1c4>)
 800124c:	4313      	orrs	r3, r2
 800124e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001250:	f7ff fa20 	bl	8000694 <HAL_GetTick>
 8001254:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001256:	e00a      	b.n	800126e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001258:	f7ff fa1c 	bl	8000694 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	f241 3288 	movw	r2, #5000	; 0x1388
 8001266:	4293      	cmp	r3, r2
 8001268:	d901      	bls.n	800126e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e053      	b.n	8001316 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800126e:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <HAL_RCC_ClockConfig+0x1c4>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 020c 	and.w	r2, r3, #12
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	429a      	cmp	r2, r3
 800127e:	d1eb      	bne.n	8001258 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001280:	4b27      	ldr	r3, [pc, #156]	; (8001320 <HAL_RCC_ClockConfig+0x1c0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0307 	and.w	r3, r3, #7
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d210      	bcs.n	80012b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128e:	4b24      	ldr	r3, [pc, #144]	; (8001320 <HAL_RCC_ClockConfig+0x1c0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f023 0207 	bic.w	r2, r3, #7
 8001296:	4922      	ldr	r1, [pc, #136]	; (8001320 <HAL_RCC_ClockConfig+0x1c0>)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	4313      	orrs	r3, r2
 800129c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800129e:	4b20      	ldr	r3, [pc, #128]	; (8001320 <HAL_RCC_ClockConfig+0x1c0>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d001      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e032      	b.n	8001316 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d008      	beq.n	80012ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <HAL_RCC_ClockConfig+0x1c4>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	4916      	ldr	r1, [pc, #88]	; (8001324 <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d009      	beq.n	80012ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012da:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_RCC_ClockConfig+0x1c4>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	490e      	ldr	r1, [pc, #56]	; (8001324 <HAL_RCC_ClockConfig+0x1c4>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012ee:	f000 f821 	bl	8001334 <HAL_RCC_GetSysClockFreq>
 80012f2:	4601      	mov	r1, r0
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <HAL_RCC_ClockConfig+0x1c4>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	091b      	lsrs	r3, r3, #4
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <HAL_RCC_ClockConfig+0x1c8>)
 8001300:	5cd3      	ldrb	r3, [r2, r3]
 8001302:	fa21 f303 	lsr.w	r3, r1, r3
 8001306:	4a09      	ldr	r2, [pc, #36]	; (800132c <HAL_RCC_ClockConfig+0x1cc>)
 8001308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <HAL_RCC_ClockConfig+0x1d0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f97e 	bl	8000610 <HAL_InitTick>

  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40022000 	.word	0x40022000
 8001324:	40021000 	.word	0x40021000
 8001328:	08002a64 	.word	0x08002a64
 800132c:	200000b4 	.word	0x200000b4
 8001330:	20000000 	.word	0x20000000

08001334 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001334:	b490      	push	{r4, r7}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800133a:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800133c:	1d3c      	adds	r4, r7, #4
 800133e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001340:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001344:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800135e:	4b23      	ldr	r3, [pc, #140]	; (80013ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b04      	cmp	r3, #4
 800136c:	d002      	beq.n	8001374 <HAL_RCC_GetSysClockFreq+0x40>
 800136e:	2b08      	cmp	r3, #8
 8001370:	d003      	beq.n	800137a <HAL_RCC_GetSysClockFreq+0x46>
 8001372:	e02d      	b.n	80013d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001376:	623b      	str	r3, [r7, #32]
      break;
 8001378:	e02d      	b.n	80013d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	0c9b      	lsrs	r3, r3, #18
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001386:	4413      	add	r3, r2
 8001388:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800138c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d013      	beq.n	80013c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	0c5b      	lsrs	r3, r3, #17
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013a6:	4413      	add	r3, r2
 80013a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80013ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	4a0f      	ldr	r2, [pc, #60]	; (80013f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013b2:	fb02 f203 	mul.w	r2, r2, r3
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
 80013be:	e004      	b.n	80013ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	4a0c      	ldr	r2, [pc, #48]	; (80013f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80013c4:	fb02 f303 	mul.w	r3, r2, r3
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	623b      	str	r3, [r7, #32]
      break;
 80013ce:	e002      	b.n	80013d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013d0:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80013d2:	623b      	str	r3, [r7, #32]
      break;
 80013d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013d6:	6a3b      	ldr	r3, [r7, #32]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3728      	adds	r7, #40	; 0x28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc90      	pop	{r4, r7}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	0800293c 	.word	0x0800293c
 80013e8:	0800294c 	.word	0x0800294c
 80013ec:	40021000 	.word	0x40021000
 80013f0:	007a1200 	.word	0x007a1200
 80013f4:	003d0900 	.word	0x003d0900

080013f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001400:	4b0a      	ldr	r3, [pc, #40]	; (800142c <RCC_Delay+0x34>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <RCC_Delay+0x38>)
 8001406:	fba2 2303 	umull	r2, r3, r2, r3
 800140a:	0a5b      	lsrs	r3, r3, #9
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	fb02 f303 	mul.w	r3, r2, r3
 8001412:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001414:	bf00      	nop
  }
  while (Delay --);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	1e5a      	subs	r2, r3, #1
 800141a:	60fa      	str	r2, [r7, #12]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f9      	bne.n	8001414 <RCC_Delay+0x1c>
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	200000b4 	.word	0x200000b4
 8001430:	10624dd3 	.word	0x10624dd3

08001434 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e07f      	b.n	8001548 <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d106      	bne.n	8001462 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f001 f977 	bl	8002750 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2202      	movs	r2, #2
 8001466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001478:	f023 0307 	bic.w	r3, r3, #7
 800147c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3304      	adds	r3, #4
 8001486:	4619      	mov	r1, r3
 8001488:	4610      	mov	r0, r2
 800148a:	f000 f899 	bl	80015c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014b6:	f023 0303 	bic.w	r3, r3, #3
 80014ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	4313      	orrs	r3, r2
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80014d4:	f023 030c 	bic.w	r3, r3, #12
 80014d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80014e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	4313      	orrs	r3, r2
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	011a      	lsls	r2, r3, #4
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	031b      	lsls	r3, r3, #12
 8001504:	4313      	orrs	r3, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001512:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	4313      	orrs	r3, r2
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	4313      	orrs	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d002      	beq.n	8001566 <HAL_TIM_Encoder_Start+0x16>
 8001560:	2b04      	cmp	r3, #4
 8001562:	d008      	beq.n	8001576 <HAL_TIM_Encoder_Start+0x26>
 8001564:	e00f      	b.n	8001586 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2201      	movs	r2, #1
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f000 f888 	bl	8001684 <TIM_CCxChannelCmd>
      break;
 8001574:	e016      	b.n	80015a4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2201      	movs	r2, #1
 800157c:	2104      	movs	r1, #4
 800157e:	4618      	mov	r0, r3
 8001580:	f000 f880 	bl	8001684 <TIM_CCxChannelCmd>
      break;
 8001584:	e00e      	b.n	80015a4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2201      	movs	r2, #1
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f000 f878 	bl	8001684 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2201      	movs	r2, #1
 800159a:	2104      	movs	r1, #4
 800159c:	4618      	mov	r0, r3
 800159e:	f000 f871 	bl	8001684 <TIM_CCxChannelCmd>
      break;
 80015a2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0201 	orr.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a29      	ldr	r2, [pc, #164]	; (8001678 <TIM_Base_SetConfig+0xb8>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d00b      	beq.n	80015f0 <TIM_Base_SetConfig+0x30>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015de:	d007      	beq.n	80015f0 <TIM_Base_SetConfig+0x30>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a26      	ldr	r2, [pc, #152]	; (800167c <TIM_Base_SetConfig+0xbc>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d003      	beq.n	80015f0 <TIM_Base_SetConfig+0x30>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a25      	ldr	r2, [pc, #148]	; (8001680 <TIM_Base_SetConfig+0xc0>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d108      	bne.n	8001602 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	4313      	orrs	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a1c      	ldr	r2, [pc, #112]	; (8001678 <TIM_Base_SetConfig+0xb8>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d00b      	beq.n	8001622 <TIM_Base_SetConfig+0x62>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001610:	d007      	beq.n	8001622 <TIM_Base_SetConfig+0x62>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a19      	ldr	r2, [pc, #100]	; (800167c <TIM_Base_SetConfig+0xbc>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d003      	beq.n	8001622 <TIM_Base_SetConfig+0x62>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a18      	ldr	r2, [pc, #96]	; (8001680 <TIM_Base_SetConfig+0xc0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d108      	bne.n	8001634 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	4313      	orrs	r3, r2
 8001632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	4313      	orrs	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a07      	ldr	r2, [pc, #28]	; (8001678 <TIM_Base_SetConfig+0xb8>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d103      	bne.n	8001668 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	691a      	ldr	r2, [r3, #16]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	615a      	str	r2, [r3, #20]
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	40012c00 	.word	0x40012c00
 800167c:	40000400 	.word	0x40000400
 8001680:	40000800 	.word	0x40000800

08001684 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001684:	b480      	push	{r7}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	f003 031f 	and.w	r3, r3, #31
 8001696:	2201      	movs	r2, #1
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a1a      	ldr	r2, [r3, #32]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	401a      	ands	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6a1a      	ldr	r2, [r3, #32]
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	f003 031f 	and.w	r3, r3, #31
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	431a      	orrs	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	621a      	str	r2, [r3, #32]
}
 80016c2:	bf00      	nop
 80016c4:	371c      	adds	r7, #28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d101      	bne.n	80016e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80016e0:	2302      	movs	r3, #2
 80016e2:	e032      	b.n	800174a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2202      	movs	r2, #2
 80016f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800170a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	4313      	orrs	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800171c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	4313      	orrs	r3, r2
 8001726:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <motorBegin>:
#include "DCMotors.h"
#include "tim.h"
#include "gpio.h"

void motorBegin(MotorControl_t* motor,  TIM_HandleTypeDef* timer, GPIO_TypeDef* left_port, uint16_t left_pin, GPIO_TypeDef* right_port, uint16_t right_pin){
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	807b      	strh	r3, [r7, #2]
	motor->dutyCycle = 0;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	761a      	strb	r2, [r3, #24]
	motor->timer = timer;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_COUNTER(motor->timer,28000);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f646 5260 	movw	r2, #28000	; 0x6d60
 8001778:	625a      	str	r2, [r3, #36]	; 0x24
	motor->actualPoint = __HAL_TIM_GET_COUNTER(motor->timer);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	b29a      	uxth	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	809a      	strh	r2, [r3, #4]
	motor->setPoint = motor->actualPoint;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	889b      	ldrh	r3, [r3, #4]
 800178c:	461a      	mov	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	601a      	str	r2, [r3, #0]

	motor->stepStatusOld = 0;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	719a      	strb	r2, [r3, #6]

	motor->left_port = left_port;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	60da      	str	r2, [r3, #12]
	motor->right_port =  right_port;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	611a      	str	r2, [r3, #16]

	motor->left_pin = left_pin;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	887a      	ldrh	r2, [r7, #2]
 80017a8:	829a      	strh	r2, [r3, #20]
	motor->right_pin = right_pin;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8bba      	ldrh	r2, [r7, #28]
 80017ae:	82da      	strh	r2, [r3, #22]

	HAL_GPIO_WritePin(motor->left_port, motor->left_pin, GPIO_PIN_RESET);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	68d8      	ldr	r0, [r3, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8a9b      	ldrh	r3, [r3, #20]
 80017b8:	2200      	movs	r2, #0
 80017ba:	4619      	mov	r1, r3
 80017bc:	f7ff fa15 	bl	8000bea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->right_port, motor->right_pin, GPIO_PIN_RESET);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6918      	ldr	r0, [r3, #16]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8adb      	ldrh	r3, [r3, #22]
 80017c8:	2200      	movs	r2, #0
 80017ca:	4619      	mov	r1, r3
 80017cc:	f7ff fa0d 	bl	8000bea <HAL_GPIO_WritePin>
}
 80017d0:	bf00      	nop
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <myABS>:


double myABS(double num1){
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	e9c7 0100 	strd	r0, r1, [r7]
	if(num1 < 0){
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017ee:	f7fe fed1 	bl	8000594 <__aeabi_dcmplt>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <myABS+0x2c>
		num1 *= -1;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001802:	607b      	str	r3, [r7, #4]
	}

	return num1;
 8001804:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8001808:	4618      	mov	r0, r3
 800180a:	4621      	mov	r1, r4
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	bd90      	pop	{r4, r7, pc}
	...

08001814 <updateAxis>:


void updateAxis(MotorControl_t* motor,signed long setPoint){
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]

	// Atualiza as variaveis que vamos usar
	motor->setPoint = setPoint;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(motor->timer,motor->actualPoint);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	889a      	ldrh	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	625a      	str	r2, [r3, #36]	; 0x24
	//		motor->dutyCycle = MIN_DUTYCYCLE;
	//	}else if(motor->dutyCycle > MAX_DUTYCYCLE){
	//		motor->dutyCycle = MAX_DUTYCYCLE;
	//	}
	//Verificar se é necesseário adicionar um loop para uma margem de erro
	while (myABS(motor->actualPoint - motor->setPoint) > 5){
 8001830:	e05c      	b.n	80018ec <updateAxis+0xd8>
		if(motor->actualPoint > motor->setPoint){
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	889b      	ldrh	r3, [r3, #4]
 8001836:	461a      	mov	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	dd1f      	ble.n	8001880 <updateAxis+0x6c>
			// Ativa o motor para a esquerda até chegar na posição correta
			while(motor->actualPoint > motor->setPoint){
 8001840:	e016      	b.n	8001870 <updateAxis+0x5c>
				HAL_GPIO_WritePin(motor->left_port, motor->left_pin, GPIO_PIN_SET);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68d8      	ldr	r0, [r3, #12]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	8a9b      	ldrh	r3, [r3, #20]
 800184a:	2201      	movs	r2, #1
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff f9cc 	bl	8000bea <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->right_port, motor->right_pin, GPIO_PIN_RESET);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6918      	ldr	r0, [r3, #16]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	8adb      	ldrh	r3, [r3, #22]
 800185a:	2200      	movs	r2, #0
 800185c:	4619      	mov	r1, r3
 800185e:	f7ff f9c4 	bl	8000bea <HAL_GPIO_WritePin>
				motor->actualPoint = __HAL_TIM_GET_COUNTER(motor->timer);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	b29a      	uxth	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	809a      	strh	r2, [r3, #4]
			while(motor->actualPoint > motor->setPoint){
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	889b      	ldrh	r3, [r3, #4]
 8001874:	461a      	mov	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	dce1      	bgt.n	8001842 <updateAxis+0x2e>
 800187e:	e025      	b.n	80018cc <updateAxis+0xb8>
			}

		}else if(motor->actualPoint < motor->setPoint){
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	889b      	ldrh	r3, [r3, #4]
 8001884:	461a      	mov	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	da1e      	bge.n	80018cc <updateAxis+0xb8>
			// Ativa o motor para a direita até chegar na posição correta
			while(motor->actualPoint < motor->setPoint){
 800188e:	e016      	b.n	80018be <updateAxis+0xaa>
				HAL_GPIO_WritePin(motor->left_port, motor->left_pin, GPIO_PIN_RESET);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68d8      	ldr	r0, [r3, #12]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	8a9b      	ldrh	r3, [r3, #20]
 8001898:	2200      	movs	r2, #0
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff f9a5 	bl	8000bea <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motor->right_port, motor->right_pin, GPIO_PIN_SET);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6918      	ldr	r0, [r3, #16]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	8adb      	ldrh	r3, [r3, #22]
 80018a8:	2201      	movs	r2, #1
 80018aa:	4619      	mov	r1, r3
 80018ac:	f7ff f99d 	bl	8000bea <HAL_GPIO_WritePin>
				motor->actualPoint = __HAL_TIM_GET_COUNTER(motor->timer);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	809a      	strh	r2, [r3, #4]
			while(motor->actualPoint < motor->setPoint){
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	889b      	ldrh	r3, [r3, #4]
 80018c2:	461a      	mov	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	dbe1      	blt.n	8001890 <updateAxis+0x7c>
			}
		}

		// Desliga o motor pras duas direções
		HAL_GPIO_WritePin(motor->left_port, motor->left_pin, GPIO_PIN_RESET);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68d8      	ldr	r0, [r3, #12]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	8a9b      	ldrh	r3, [r3, #20]
 80018d4:	2200      	movs	r2, #0
 80018d6:	4619      	mov	r1, r3
 80018d8:	f7ff f987 	bl	8000bea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->right_port, motor->right_pin, GPIO_PIN_RESET);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6918      	ldr	r0, [r3, #16]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	8adb      	ldrh	r3, [r3, #22]
 80018e4:	2200      	movs	r2, #0
 80018e6:	4619      	mov	r1, r3
 80018e8:	f7ff f97f 	bl	8000bea <HAL_GPIO_WritePin>
	while (myABS(motor->actualPoint - motor->setPoint) > 5){
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	889b      	ldrh	r3, [r3, #4]
 80018f0:	461a      	mov	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fd81 	bl	8000400 <__aeabi_i2d>
 80018fe:	4603      	mov	r3, r0
 8001900:	460c      	mov	r4, r1
 8001902:	4618      	mov	r0, r3
 8001904:	4621      	mov	r1, r4
 8001906:	f7ff ff67 	bl	80017d8 <myABS>
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <updateAxis+0x11c>)
 8001910:	f7fe fe5e 	bl	80005d0 <__aeabi_dcmpgt>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d18b      	bne.n	8001832 <updateAxis+0x1e>

	}

	//Atualiza posição atual
	motor->actualPoint = __HAL_TIM_GET_COUNTER(motor->timer);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	b29a      	uxth	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	809a      	strh	r2, [r3, #4]

	return ;
 8001928:	bf00      	nop

}
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bd90      	pop	{r4, r7, pc}
 8001930:	40140000 	.word	0x40140000

08001934 <motorForward>:

	HAL_GPIO_WritePin(motor->A_PORT, motor->A_PIN, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(motor->B_PORT, motor->B_PIN, GPIO_PIN_RESET);
}
//Faz o motor da pin�a ir pra frente
void motorForward(MotorControl_Simple_t* motor, uint32_t time){
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(motor->A_PORT, motor->A_PIN, GPIO_PIN_SET);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6818      	ldr	r0, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	889b      	ldrh	r3, [r3, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	4619      	mov	r1, r3
 800194a:	f7ff f94e 	bl	8000bea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->B_PORT, motor->B_PIN, GPIO_PIN_RESET);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6898      	ldr	r0, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	899b      	ldrh	r3, [r3, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	4619      	mov	r1, r3
 800195a:	f7ff f946 	bl	8000bea <HAL_GPIO_WritePin>
	HAL_Delay(time);
 800195e:	6838      	ldr	r0, [r7, #0]
 8001960:	f7fe fea2 	bl	80006a8 <HAL_Delay>

	HAL_GPIO_WritePin(motor->A_PORT, motor->A_PIN, GPIO_PIN_RESET);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	889b      	ldrh	r3, [r3, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	4619      	mov	r1, r3
 8001970:	f7ff f93b 	bl	8000bea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->B_PORT, motor->B_PIN, GPIO_PIN_RESET);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6898      	ldr	r0, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	899b      	ldrh	r3, [r3, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	4619      	mov	r1, r3
 8001980:	f7ff f933 	bl	8000bea <HAL_GPIO_WritePin>

}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <motorBackward>:
//Faz o motor da pin�a voltar para tr�s
void  motorBackward(MotorControl_Simple_t* motor, uint32_t time){
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(motor->A_PORT, motor->A_PIN, GPIO_PIN_RESET);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6818      	ldr	r0, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	889b      	ldrh	r3, [r3, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	4619      	mov	r1, r3
 80019a2:	f7ff f922 	bl	8000bea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->B_PORT, motor->B_PIN, GPIO_PIN_SET);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6898      	ldr	r0, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	899b      	ldrh	r3, [r3, #12]
 80019ae:	2201      	movs	r2, #1
 80019b0:	4619      	mov	r1, r3
 80019b2:	f7ff f91a 	bl	8000bea <HAL_GPIO_WritePin>
	HAL_Delay(2*time);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fe74 	bl	80006a8 <HAL_Delay>

	HAL_GPIO_WritePin(motor->A_PORT, motor->A_PIN, GPIO_PIN_RESET);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6818      	ldr	r0, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	889b      	ldrh	r3, [r3, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	4619      	mov	r1, r3
 80019cc:	f7ff f90d 	bl	8000bea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->B_PORT, motor->B_PIN, GPIO_PIN_RESET);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6898      	ldr	r0, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	899b      	ldrh	r3, [r3, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	4619      	mov	r1, r3
 80019dc:	f7ff f905 	bl	8000bea <HAL_GPIO_WritePin>

}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <pierce>:
//Faz o motor da pin�a furar
void pierce(MotorControl_Simple_t* motor, uint32_t time){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
	motorForward(motor, time);
 80019f2:	6839      	ldr	r1, [r7, #0]
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ff9d 	bl	8001934 <motorForward>
	motorBackward(motor, time);
 80019fa:	6839      	ldr	r1, [r7, #0]
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ffc5 	bl	800198c <motorBackward>
	HAL_Delay(200);
 8001a02:	20c8      	movs	r0, #200	; 0xc8
 8001a04:	f7fe fe50 	bl	80006a8 <HAL_Delay>
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <ps2interrupt>:



// The ISR for the external interrupt
void ps2interrupt(Keyboard_TypeDef* keyboard)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	static uint8_t incoming=0;
	static uint32_t prev_ms=0;
	uint32_t now_ms;
	uint8_t n, val;

	val = HAL_GPIO_ReadPin(keyboard->DataPort, keyboard->DataPin); 
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4619      	mov	r1, r3
 8001a26:	4610      	mov	r0, r2
 8001a28:	f7ff f8c8 	bl	8000bbc <HAL_GPIO_ReadPin>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	75bb      	strb	r3, [r7, #22]
	now_ms = HAL_GetTick() ;
 8001a30:	f7fe fe30 	bl	8000694 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]
	if (now_ms - prev_ms > 250) {
 8001a36:	4b29      	ldr	r3, [pc, #164]	; (8001adc <ps2interrupt+0xcc>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2bfa      	cmp	r3, #250	; 0xfa
 8001a40:	d905      	bls.n	8001a4e <ps2interrupt+0x3e>
		bitcount = 0;
 8001a42:	4b27      	ldr	r3, [pc, #156]	; (8001ae0 <ps2interrupt+0xd0>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
		incoming = 0;
 8001a48:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <ps2interrupt+0xd4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
	}
	prev_ms = now_ms;
 8001a4e:	4a23      	ldr	r2, [pc, #140]	; (8001adc <ps2interrupt+0xcc>)
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	6013      	str	r3, [r2, #0]
	n = bitcount - 1;
 8001a54:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <ps2interrupt+0xd0>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
	if (n <= 7) {
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	2b07      	cmp	r3, #7
 8001a60:	d80c      	bhi.n	8001a7c <ps2interrupt+0x6c>
		incoming |= (val << n);
 8001a62:	7dba      	ldrb	r2, [r7, #22]
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	b25a      	sxtb	r2, r3
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <ps2interrupt+0xd4>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	b25b      	sxtb	r3, r3
 8001a72:	4313      	orrs	r3, r2
 8001a74:	b25b      	sxtb	r3, r3
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <ps2interrupt+0xd4>)
 8001a7a:	701a      	strb	r2, [r3, #0]
	}
	bitcount++;
 8001a7c:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <ps2interrupt+0xd0>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	3301      	adds	r3, #1
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <ps2interrupt+0xd0>)
 8001a86:	701a      	strb	r2, [r3, #0]
	if (bitcount == 11) {
 8001a88:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <ps2interrupt+0xd0>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b0b      	cmp	r3, #11
 8001a8e:	d120      	bne.n	8001ad2 <ps2interrupt+0xc2>
		uint8_t i = keyboard->head + 1;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	75fb      	strb	r3, [r7, #23]
		if (i >= BUFFER_SIZE) i = 0;
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
 8001a9e:	2b2c      	cmp	r3, #44	; 0x2c
 8001aa0:	d901      	bls.n	8001aa6 <ps2interrupt+0x96>
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	75fb      	strb	r3, [r7, #23]
		if (i != keyboard->tail) {
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	7dfa      	ldrb	r2, [r7, #23]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d008      	beq.n	8001ac6 <ps2interrupt+0xb6>
			keyboard->buffer[i] = incoming;
 8001ab4:	7dfb      	ldrb	r3, [r7, #23]
 8001ab6:	4a0b      	ldr	r2, [pc, #44]	; (8001ae4 <ps2interrupt+0xd4>)
 8001ab8:	7811      	ldrb	r1, [r2, #0]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	54d1      	strb	r1, [r2, r3]
			keyboard->head = i;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7dfa      	ldrb	r2, [r7, #23]
 8001ac2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		}
		bitcount = 0;
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <ps2interrupt+0xd0>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
		incoming = 0;
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <ps2interrupt+0xd4>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
	}
}
 8001ad2:	bf00      	nop
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200000d4 	.word	0x200000d4
 8001ae0:	200000d8 	.word	0x200000d8
 8001ae4:	200000d9 	.word	0x200000d9

08001ae8 <get_scan_code>:

static inline uint8_t get_scan_code(Keyboard_TypeDef* keyboard)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	uint8_t c, i;

	i = keyboard->tail;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001af6:	73fb      	strb	r3, [r7, #15]
	if (i == keyboard->head) return 0;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	7bfa      	ldrb	r2, [r7, #15]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d101      	bne.n	8001b0a <get_scan_code+0x22>
 8001b06:	2300      	movs	r3, #0
 8001b08:	e010      	b.n	8001b2c <get_scan_code+0x44>
	i++;
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
	if (i >= BUFFER_SIZE) i = 0;
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	2b2c      	cmp	r3, #44	; 0x2c
 8001b14:	d901      	bls.n	8001b1a <get_scan_code+0x32>
 8001b16:	2300      	movs	r3, #0
 8001b18:	73fb      	strb	r3, [r7, #15]
	c = keyboard->buffer[i];
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	5cd3      	ldrb	r3, [r2, r3]
 8001b20:	73bb      	strb	r3, [r7, #14]
	keyboard->tail = i;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	7bfa      	ldrb	r2, [r7, #15]
 8001b26:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	return c;
 8001b2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr
	...

08001b38 <get_iso8859_code>:
#define SHIFT_L   0x04
#define SHIFT_R   0x08
#define ALTGR     0x10

static char get_iso8859_code(Keyboard_TypeDef* keyboard)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	static uint8_t state=0;
	uint8_t s;
	char c;

	while (1) {
		s = get_scan_code(keyboard);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ffd1 	bl	8001ae8 <get_scan_code>
 8001b46:	4603      	mov	r3, r0
 8001b48:	73bb      	strb	r3, [r7, #14]
		if (!s) return 0;
 8001b4a:	7bbb      	ldrb	r3, [r7, #14]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <get_iso8859_code+0x1c>
 8001b50:	2300      	movs	r3, #0
 8001b52:	e145      	b.n	8001de0 <get_iso8859_code+0x2a8>
		if (s == 0xF0) {
 8001b54:	7bbb      	ldrb	r3, [r7, #14]
 8001b56:	2bf0      	cmp	r3, #240	; 0xf0
 8001b58:	d107      	bne.n	8001b6a <get_iso8859_code+0x32>
			state |= BREAK;
 8001b5a:	4ba3      	ldr	r3, [pc, #652]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	4ba0      	ldr	r3, [pc, #640]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001b66:	701a      	strb	r2, [r3, #0]
 8001b68:	e7ea      	b.n	8001b40 <get_iso8859_code+0x8>
		} else if (s == 0xE0) {
 8001b6a:	7bbb      	ldrb	r3, [r7, #14]
 8001b6c:	2be0      	cmp	r3, #224	; 0xe0
 8001b6e:	d107      	bne.n	8001b80 <get_iso8859_code+0x48>
			state |= MODIFIER;
 8001b70:	4b9d      	ldr	r3, [pc, #628]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4b9b      	ldr	r3, [pc, #620]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001b7c:	701a      	strb	r2, [r3, #0]
 8001b7e:	e7df      	b.n	8001b40 <get_iso8859_code+0x8>
		} else {
			if (state & BREAK) {
 8001b80:	4b99      	ldr	r3, [pc, #612]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d02d      	beq.n	8001be8 <get_iso8859_code+0xb0>
				if (s == 0x12) {
 8001b8c:	7bbb      	ldrb	r3, [r7, #14]
 8001b8e:	2b12      	cmp	r3, #18
 8001b90:	d107      	bne.n	8001ba2 <get_iso8859_code+0x6a>
					state &= ~SHIFT_L;
 8001b92:	4b95      	ldr	r3, [pc, #596]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	f023 0304 	bic.w	r3, r3, #4
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	4b92      	ldr	r3, [pc, #584]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001b9e:	701a      	strb	r2, [r3, #0]
 8001ba0:	e01a      	b.n	8001bd8 <get_iso8859_code+0xa0>
				} else if (s == 0x59) {
 8001ba2:	7bbb      	ldrb	r3, [r7, #14]
 8001ba4:	2b59      	cmp	r3, #89	; 0x59
 8001ba6:	d107      	bne.n	8001bb8 <get_iso8859_code+0x80>
					state &= ~SHIFT_R;
 8001ba8:	4b8f      	ldr	r3, [pc, #572]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	f023 0308 	bic.w	r3, r3, #8
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4b8d      	ldr	r3, [pc, #564]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001bb4:	701a      	strb	r2, [r3, #0]
 8001bb6:	e00f      	b.n	8001bd8 <get_iso8859_code+0xa0>
				} else if (s == 0x11 && (state & MODIFIER)) {
 8001bb8:	7bbb      	ldrb	r3, [r7, #14]
 8001bba:	2b11      	cmp	r3, #17
 8001bbc:	d10c      	bne.n	8001bd8 <get_iso8859_code+0xa0>
 8001bbe:	4b8a      	ldr	r3, [pc, #552]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d006      	beq.n	8001bd8 <get_iso8859_code+0xa0>
					state &= ~ALTGR;
 8001bca:	4b87      	ldr	r3, [pc, #540]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	f023 0310 	bic.w	r3, r3, #16
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	4b84      	ldr	r3, [pc, #528]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001bd6:	701a      	strb	r2, [r3, #0]
				}
				// CTRL, ALT & WIN keys could be added
				// but is that really worth the overkeyboard->head?
				state &= ~(BREAK | MODIFIER);
 8001bd8:	4b83      	ldr	r3, [pc, #524]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	f023 0303 	bic.w	r3, r3, #3
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4b81      	ldr	r3, [pc, #516]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001be4:	701a      	strb	r2, [r3, #0]
				continue;
 8001be6:	e0fa      	b.n	8001dde <get_iso8859_code+0x2a6>
			}
			if (s == 0x12) {
 8001be8:	7bbb      	ldrb	r3, [r7, #14]
 8001bea:	2b12      	cmp	r3, #18
 8001bec:	d107      	bne.n	8001bfe <get_iso8859_code+0xc6>
				state |= SHIFT_L;
 8001bee:	4b7e      	ldr	r3, [pc, #504]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	f043 0304 	orr.w	r3, r3, #4
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	4b7b      	ldr	r3, [pc, #492]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001bfa:	701a      	strb	r2, [r3, #0]
				continue;
 8001bfc:	e0ef      	b.n	8001dde <get_iso8859_code+0x2a6>
			} else if (s == 0x59) {
 8001bfe:	7bbb      	ldrb	r3, [r7, #14]
 8001c00:	2b59      	cmp	r3, #89	; 0x59
 8001c02:	d107      	bne.n	8001c14 <get_iso8859_code+0xdc>
				state |= SHIFT_R;
 8001c04:	4b78      	ldr	r3, [pc, #480]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	f043 0308 	orr.w	r3, r3, #8
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4b76      	ldr	r3, [pc, #472]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001c10:	701a      	strb	r2, [r3, #0]
				continue;
 8001c12:	e0e4      	b.n	8001dde <get_iso8859_code+0x2a6>
			} else if (s == 0x11 && (state & MODIFIER)) {
 8001c14:	7bbb      	ldrb	r3, [r7, #14]
 8001c16:	2b11      	cmp	r3, #17
 8001c18:	d10c      	bne.n	8001c34 <get_iso8859_code+0xfc>
 8001c1a:	4b73      	ldr	r3, [pc, #460]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <get_iso8859_code+0xfc>
				state |= ALTGR;
 8001c26:	4b70      	ldr	r3, [pc, #448]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	f043 0310 	orr.w	r3, r3, #16
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	4b6d      	ldr	r3, [pc, #436]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001c32:	701a      	strb	r2, [r3, #0]
			}
			c = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	73fb      	strb	r3, [r7, #15]
			if (state & MODIFIER) {
 8001c38:	4b6b      	ldr	r3, [pc, #428]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 8095 	beq.w	8001d70 <get_iso8859_code+0x238>
				switch (s) {
 8001c46:	7bbb      	ldrb	r3, [r7, #14]
 8001c48:	3b4a      	subs	r3, #74	; 0x4a
 8001c4a:	2b33      	cmp	r3, #51	; 0x33
 8001c4c:	f200 80b9 	bhi.w	8001dc2 <get_iso8859_code+0x28a>
 8001c50:	a201      	add	r2, pc, #4	; (adr r2, 8001c58 <get_iso8859_code+0x120>)
 8001c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c56:	bf00      	nop
 8001c58:	08001d65 	.word	0x08001d65
 8001c5c:	08001dc3 	.word	0x08001dc3
 8001c60:	08001dc3 	.word	0x08001dc3
 8001c64:	08001dc3 	.word	0x08001dc3
 8001c68:	08001dc3 	.word	0x08001dc3
 8001c6c:	08001dc3 	.word	0x08001dc3
 8001c70:	08001dc3 	.word	0x08001dc3
 8001c74:	08001dc3 	.word	0x08001dc3
 8001c78:	08001dc3 	.word	0x08001dc3
 8001c7c:	08001dc3 	.word	0x08001dc3
 8001c80:	08001dc3 	.word	0x08001dc3
 8001c84:	08001dc3 	.word	0x08001dc3
 8001c88:	08001dc3 	.word	0x08001dc3
 8001c8c:	08001dc3 	.word	0x08001dc3
 8001c90:	08001dc3 	.word	0x08001dc3
 8001c94:	08001dc3 	.word	0x08001dc3
 8001c98:	08001d6b 	.word	0x08001d6b
 8001c9c:	08001dc3 	.word	0x08001dc3
 8001ca0:	08001dc3 	.word	0x08001dc3
 8001ca4:	08001dc3 	.word	0x08001dc3
 8001ca8:	08001dc3 	.word	0x08001dc3
 8001cac:	08001dc3 	.word	0x08001dc3
 8001cb0:	08001dc3 	.word	0x08001dc3
 8001cb4:	08001dc3 	.word	0x08001dc3
 8001cb8:	08001dc3 	.word	0x08001dc3
 8001cbc:	08001dc3 	.word	0x08001dc3
 8001cc0:	08001dc3 	.word	0x08001dc3
 8001cc4:	08001dc3 	.word	0x08001dc3
 8001cc8:	08001dc3 	.word	0x08001dc3
 8001ccc:	08001dc3 	.word	0x08001dc3
 8001cd0:	08001dc3 	.word	0x08001dc3
 8001cd4:	08001d41 	.word	0x08001d41
 8001cd8:	08001dc3 	.word	0x08001dc3
 8001cdc:	08001d53 	.word	0x08001d53
 8001ce0:	08001d2f 	.word	0x08001d2f
 8001ce4:	08001dc3 	.word	0x08001dc3
 8001ce8:	08001dc3 	.word	0x08001dc3
 8001cec:	08001dc3 	.word	0x08001dc3
 8001cf0:	08001d29 	.word	0x08001d29
 8001cf4:	08001d3b 	.word	0x08001d3b
 8001cf8:	08001d59 	.word	0x08001d59
 8001cfc:	08001dc3 	.word	0x08001dc3
 8001d00:	08001d5f 	.word	0x08001d5f
 8001d04:	08001d4d 	.word	0x08001d4d
 8001d08:	08001dc3 	.word	0x08001dc3
 8001d0c:	08001dc3 	.word	0x08001dc3
 8001d10:	08001dc3 	.word	0x08001dc3
 8001d14:	08001dc3 	.word	0x08001dc3
 8001d18:	08001d47 	.word	0x08001d47
 8001d1c:	08001dc3 	.word	0x08001dc3
 8001d20:	08001dc3 	.word	0x08001dc3
 8001d24:	08001d35 	.word	0x08001d35
				  case 0x70: c = PS2_INSERT;      break;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	73fb      	strb	r3, [r7, #15]
 8001d2c:	e04a      	b.n	8001dc4 <get_iso8859_code+0x28c>
				  case 0x6C: c = PS2_HOME;        break;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	73fb      	strb	r3, [r7, #15]
 8001d32:	e047      	b.n	8001dc4 <get_iso8859_code+0x28c>
				  case 0x7D: c = PS2_PAGEUP;      break;
 8001d34:	2319      	movs	r3, #25
 8001d36:	73fb      	strb	r3, [r7, #15]
 8001d38:	e044      	b.n	8001dc4 <get_iso8859_code+0x28c>
				  case 0x71: c = PS2_DELETE;      break;
 8001d3a:	237f      	movs	r3, #127	; 0x7f
 8001d3c:	73fb      	strb	r3, [r7, #15]
 8001d3e:	e041      	b.n	8001dc4 <get_iso8859_code+0x28c>
				  case 0x69: c = PS2_END;         break;
 8001d40:	2300      	movs	r3, #0
 8001d42:	73fb      	strb	r3, [r7, #15]
 8001d44:	e03e      	b.n	8001dc4 <get_iso8859_code+0x28c>
				  case 0x7A: c = PS2_PAGEDOWN;    break;
 8001d46:	231a      	movs	r3, #26
 8001d48:	73fb      	strb	r3, [r7, #15]
 8001d4a:	e03b      	b.n	8001dc4 <get_iso8859_code+0x28c>
				  case 0x75: c = PS2_UPARROW;     break;
 8001d4c:	230b      	movs	r3, #11
 8001d4e:	73fb      	strb	r3, [r7, #15]
 8001d50:	e038      	b.n	8001dc4 <get_iso8859_code+0x28c>
				  case 0x6B: c = PS2_LEFTARROW;   break;
 8001d52:	2308      	movs	r3, #8
 8001d54:	73fb      	strb	r3, [r7, #15]
 8001d56:	e035      	b.n	8001dc4 <get_iso8859_code+0x28c>
				  case 0x72: c = PS2_DOWNARROW;   break;
 8001d58:	230a      	movs	r3, #10
 8001d5a:	73fb      	strb	r3, [r7, #15]
 8001d5c:	e032      	b.n	8001dc4 <get_iso8859_code+0x28c>
				  case 0x74: c = PS2_RIGHTARROW;  break;
 8001d5e:	2315      	movs	r3, #21
 8001d60:	73fb      	strb	r3, [r7, #15]
 8001d62:	e02f      	b.n	8001dc4 <get_iso8859_code+0x28c>
				  case 0x4A: c = '/';             break;
 8001d64:	232f      	movs	r3, #47	; 0x2f
 8001d66:	73fb      	strb	r3, [r7, #15]
 8001d68:	e02c      	b.n	8001dc4 <get_iso8859_code+0x28c>
				  case 0x5A: c = PS2_ENTER;       break;
 8001d6a:	230d      	movs	r3, #13
 8001d6c:	73fb      	strb	r3, [r7, #15]
 8001d6e:	e029      	b.n	8001dc4 <get_iso8859_code+0x28c>
				  default: break;
				}
			} else if ((state & ALTGR) && keyboard->keymap->uses_altgr) {
 8001d70:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d011      	beq.n	8001da0 <get_iso8859_code+0x268>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00b      	beq.n	8001da0 <get_iso8859_code+0x268>
				if (s < PS2_KEYMAP_SIZE)
 8001d88:	7bbb      	ldrb	r3, [r7, #14]
 8001d8a:	2b87      	cmp	r3, #135	; 0x87
 8001d8c:	d81a      	bhi.n	8001dc4 <get_iso8859_code+0x28c>
					c = pgm_read_byte(keyboard->keymap->altgr + s); // MUDAR
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 8001d96:	7bbb      	ldrb	r3, [r7, #14]
 8001d98:	4413      	add	r3, r2
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	73fb      	strb	r3, [r7, #15]
				if (s < PS2_KEYMAP_SIZE)
 8001d9e:	e011      	b.n	8001dc4 <get_iso8859_code+0x28c>
			} else if (state & (SHIFT_L | SHIFT_R)) {
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	f003 030c 	and.w	r3, r3, #12
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10b      	bne.n	8001dc4 <get_iso8859_code+0x28c>
//				if (s < PS2_KEYMAP_SIZE)
				//	c = pgm_read_byte(keyboard->keymap->shift + s);
			} else {
				if (s < PS2_KEYMAP_SIZE)
 8001dac:	7bbb      	ldrb	r3, [r7, #14]
 8001dae:	2b87      	cmp	r3, #135	; 0x87
 8001db0:	d808      	bhi.n	8001dc4 <get_iso8859_code+0x28c>
					c = pgm_read_byte(keyboard->keymap->noshift + s);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	461a      	mov	r2, r3
 8001db8:	7bbb      	ldrb	r3, [r7, #14]
 8001dba:	4413      	add	r3, r2
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	73fb      	strb	r3, [r7, #15]
 8001dc0:	e000      	b.n	8001dc4 <get_iso8859_code+0x28c>
				  default: break;
 8001dc2:	bf00      	nop
			}
			state &= ~(BREAK | MODIFIER);
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	f023 0303 	bic.w	r3, r3, #3
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <get_iso8859_code+0x2b0>)
 8001dd0:	701a      	strb	r2, [r3, #0]
			if (c) return c;
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f43f aeb3 	beq.w	8001b40 <get_iso8859_code+0x8>
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	e000      	b.n	8001de0 <get_iso8859_code+0x2a8>
		s = get_scan_code(keyboard);
 8001dde:	e6af      	b.n	8001b40 <get_iso8859_code+0x8>
		}
	}
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	200000da 	.word	0x200000da

08001dec <keyboardAvailable>:

uint8_t keyboardAvailable(Keyboard_TypeDef* keyboard) {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	if (keyboard->CharBuffer || keyboard->UTF8next) return 1;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d104      	bne.n	8001e08 <keyboardAvailable+0x1c>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <keyboardAvailable+0x20>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e00f      	b.n	8001e2c <keyboardAvailable+0x40>
	keyboard->CharBuffer = get_iso8859_code(keyboard);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff fe93 	bl	8001b38 <get_iso8859_code>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461a      	mov	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	if (keyboard->CharBuffer) return 1;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <keyboardAvailable+0x3e>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <keyboardAvailable+0x40>
	return 0;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <keyboardClear>:

void keyboardClear(Keyboard_TypeDef* keyboard) {
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	keyboard->CharBuffer = 0;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	keyboard->UTF8next = 0;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr

08001e56 <keyboardRead>:
uint8_t keyboardReadScanCode(Keyboard_TypeDef* keyboard) 
{
	return get_scan_code(keyboard);
}

uint8_t keyboardRead(Keyboard_TypeDef* keyboard) { 
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
	uint8_t result;

	result = keyboard->UTF8next;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e64:	73fb      	strb	r3, [r7, #15]
	if (result) {
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d004      	beq.n	8001e76 <keyboardRead+0x20>
		keyboard->UTF8next = 0;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001e74:	e028      	b.n	8001ec8 <keyboardRead+0x72>
	} else {
		result = keyboard->CharBuffer;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e7c:	73fb      	strb	r3, [r7, #15]
		if (result) {
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d004      	beq.n	8001e8e <keyboardRead+0x38>
			keyboard->CharBuffer = 0;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001e8c:	e004      	b.n	8001e98 <keyboardRead+0x42>
		} else {
			result = get_iso8859_code(keyboard);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff fe52 	bl	8001b38 <get_iso8859_code>
 8001e94:	4603      	mov	r3, r0
 8001e96:	73fb      	strb	r3, [r7, #15]
		}
		if (result >= 128) {
 8001e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	da13      	bge.n	8001ec8 <keyboardRead+0x72>
			keyboard->UTF8next = (result & 0x3F) | 0x80;
 8001ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ea8:	b25b      	sxtb	r3, r3
 8001eaa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001eae:	b25b      	sxtb	r3, r3
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
			result = ((result >> 6) & 0x1F) | 0xC0;
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	099b      	lsrs	r3, r3, #6
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	b25b      	sxtb	r3, r3
 8001ec0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001ec4:	b25b      	sxtb	r3, r3
 8001ec6:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (!result) return -1;
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <keyboardRead+0x7c>
 8001ece:	23ff      	movs	r3, #255	; 0xff
 8001ed0:	e000      	b.n	8001ed4 <keyboardRead+0x7e>
	return result;
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <keyboardBegin>:


/* PIN CONFIGURATION: both DataPin and IQRPin must be iniciatized with PULLUP configuration
*/

void keyboardBegin(Keyboard_TypeDef* keyboard, GPIO_TypeDef* data_port, uint8_t data_pin, GPIO_TypeDef* iqr_port, uint8_t iqr_pin) {
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	71fb      	strb	r3, [r7, #7]

  keyboard->DataPort = data_port;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	631a      	str	r2, [r3, #48]	; 0x30
  keyboard->DataPin = data_pin;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	79fa      	ldrb	r2, [r7, #7]
 8001ef6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  keyboard->IQRPort = iqr_port;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	639a      	str	r2, [r3, #56]	; 0x38
  keyboard->IQRPin = iqr_pin;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	7e3a      	ldrb	r2, [r7, #24]
 8001f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  keyboard->keymap = &PS2Keymap_US;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4a0b      	ldr	r2, [pc, #44]	; (8001f38 <keyboardBegin+0x5c>)
 8001f0c:	641a      	str	r2, [r3, #64]	; 0x40

  keyboard->head = 0;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  keyboard->tail = 0;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  keyboard->CharBuffer = 0;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  keyboard->UTF8next = 0;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

}
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	08002950 	.word	0x08002950

08001f3c <fillLineWithBraille>:
//  {{1,1,1,0},{0,1,1,0},{0,0,1,1}},
//  {{1,1,1,0},{1,1,1,0},{0,0,1,1}},
//  {{0,1,1,0},{1,1,1,0},{0,0,1,1}},
//  {{1,0,1,0},{0,1,1,0},{0,0,1,1}}
//                  };
void fillLineWithBraille( unsigned char *lineBraille, unsigned char line, unsigned char letter){
 8001f3c:	b490      	push	{r4, r7}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	70fb      	strb	r3, [r7, #3]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	70bb      	strb	r3, [r7, #2]

	/*
	 * OVERFLOW NA MEMÓRIA FLASH
	 */
	if(letter>=48 && letter<=57){
 8001f4c:	78bb      	ldrb	r3, [r7, #2]
 8001f4e:	2b2f      	cmp	r3, #47	; 0x2f
 8001f50:	d902      	bls.n	8001f58 <fillLineWithBraille+0x1c>
 8001f52:	78bb      	ldrb	r3, [r7, #2]
 8001f54:	2b39      	cmp	r3, #57	; 0x39
 8001f56:	d939      	bls.n	8001fcc <fillLineWithBraille+0x90>
//		for(int i=0;i<4;i++){
//			lineBraille[i]=numbersBraille[letter-48][line][i];
//		}
	}
	else{
		if(letter>=65 && letter<=90){
 8001f58:	78bb      	ldrb	r3, [r7, #2]
 8001f5a:	2b40      	cmp	r3, #64	; 0x40
 8001f5c:	d905      	bls.n	8001f6a <fillLineWithBraille+0x2e>
 8001f5e:	78bb      	ldrb	r3, [r7, #2]
 8001f60:	2b5a      	cmp	r3, #90	; 0x5a
 8001f62:	d802      	bhi.n	8001f6a <fillLineWithBraille+0x2e>
			letter+=32;
 8001f64:	78bb      	ldrb	r3, [r7, #2]
 8001f66:	3320      	adds	r3, #32
 8001f68:	70bb      	strb	r3, [r7, #2]
		}

		for(int i=0;i<2;i++){
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	e022      	b.n	8001fb6 <fillLineWithBraille+0x7a>
			if(letter>=97 && letter<=122){
 8001f70:	78bb      	ldrb	r3, [r7, #2]
 8001f72:	2b60      	cmp	r3, #96	; 0x60
 8001f74:	d914      	bls.n	8001fa0 <fillLineWithBraille+0x64>
 8001f76:	78bb      	ldrb	r3, [r7, #2]
 8001f78:	2b7a      	cmp	r3, #122	; 0x7a
 8001f7a:	d811      	bhi.n	8001fa0 <fillLineWithBraille+0x64>
				lineBraille[i]=lettersBraille[letter-97][line][i];
 8001f7c:	78bb      	ldrb	r3, [r7, #2]
 8001f7e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8001f82:	78f8      	ldrb	r0, [r7, #3]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	4419      	add	r1, r3
 8001f8a:	4c13      	ldr	r4, [pc, #76]	; (8001fd8 <fillLineWithBraille+0x9c>)
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	4403      	add	r3, r0
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	18e2      	adds	r2, r4, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	700b      	strb	r3, [r1, #0]
			}
			if(letter==32){
 8001fa0:	78bb      	ldrb	r3, [r7, #2]
 8001fa2:	2b20      	cmp	r3, #32
 8001fa4:	d104      	bne.n	8001fb0 <fillLineWithBraille+0x74>
				lineBraille[i]=0;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	4413      	add	r3, r2
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<2;i++){
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	ddd9      	ble.n	8001f70 <fillLineWithBraille+0x34>
			}
		}
		lineBraille[2]='\0';
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3302      	adds	r3, #2
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
		lineBraille[3]='\0';
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3303      	adds	r3, #3
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]


	}
}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc90      	pop	{r4, r7}
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000008 	.word	0x20000008

08001fdc <feedBuffer>:

/*
 * Adiciona caracteres a uma string
 */

void feedBuffer(unsigned char* buffer, short SIZE, unsigned char c){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	707b      	strb	r3, [r7, #1]
    unsigned short len = strlen((const char*)buffer);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7fe f8ad 	bl	800014c <strlen>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	81fb      	strh	r3, [r7, #14]
    if(len != (SIZE-1)){
 8001ff6:	89fa      	ldrh	r2, [r7, #14]
 8001ff8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d00a      	beq.n	8002018 <feedBuffer+0x3c>
        buffer[len] = c;
 8002002:	89fb      	ldrh	r3, [r7, #14]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	4413      	add	r3, r2
 8002008:	787a      	ldrb	r2, [r7, #1]
 800200a:	701a      	strb	r2, [r3, #0]
        buffer[len+1] = '\0';
 800200c:	89fb      	ldrh	r3, [r7, #14]
 800200e:	3301      	adds	r3, #1
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	4413      	add	r3, r2
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
    }
}
 8002018:	bf00      	nop
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <clearBuffer>:

/*
 * Limpa uma string
 */
void clearBuffer(unsigned char* buffer){
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
    buffer[0] = '\0';
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203e:	f107 0310 	add.w	r3, r7, #16
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	609a      	str	r2, [r3, #8]
 800204a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800204c:	4b41      	ldr	r3, [pc, #260]	; (8002154 <MX_GPIO_Init+0x11c>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	4a40      	ldr	r2, [pc, #256]	; (8002154 <MX_GPIO_Init+0x11c>)
 8002052:	f043 0310 	orr.w	r3, r3, #16
 8002056:	6193      	str	r3, [r2, #24]
 8002058:	4b3e      	ldr	r3, [pc, #248]	; (8002154 <MX_GPIO_Init+0x11c>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002064:	4b3b      	ldr	r3, [pc, #236]	; (8002154 <MX_GPIO_Init+0x11c>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	4a3a      	ldr	r2, [pc, #232]	; (8002154 <MX_GPIO_Init+0x11c>)
 800206a:	f043 0304 	orr.w	r3, r3, #4
 800206e:	6193      	str	r3, [r2, #24]
 8002070:	4b38      	ldr	r3, [pc, #224]	; (8002154 <MX_GPIO_Init+0x11c>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800207c:	4b35      	ldr	r3, [pc, #212]	; (8002154 <MX_GPIO_Init+0x11c>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	4a34      	ldr	r2, [pc, #208]	; (8002154 <MX_GPIO_Init+0x11c>)
 8002082:	f043 0308 	orr.w	r3, r3, #8
 8002086:	6193      	str	r3, [r2, #24]
 8002088:	4b32      	ldr	r3, [pc, #200]	; (8002154 <MX_GPIO_Init+0x11c>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	607b      	str	r3, [r7, #4]
 8002092:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUTPUT_LED_GPIO_Port, OUTPUT_LED_Pin, GPIO_PIN_RESET);
 8002094:	2200      	movs	r2, #0
 8002096:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800209a:	482f      	ldr	r0, [pc, #188]	; (8002158 <MX_GPIO_Init+0x120>)
 800209c:	f7fe fda5 	bl	8000bea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor_Z_A_Pin|Motor_Z_B_Pin|MOTOR_Y_A_Pin|MOTOR_Y_B_Pin, GPIO_PIN_RESET);
 80020a0:	2200      	movs	r2, #0
 80020a2:	213c      	movs	r1, #60	; 0x3c
 80020a4:	482d      	ldr	r0, [pc, #180]	; (800215c <MX_GPIO_Init+0x124>)
 80020a6:	f7fe fda0 	bl	8000bea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_X_A_Pin|MOTOR_X_B_Pin, GPIO_PIN_RESET);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2103      	movs	r1, #3
 80020ae:	482c      	ldr	r0, [pc, #176]	; (8002160 <MX_GPIO_Init+0x128>)
 80020b0:	f7fe fd9b 	bl	8000bea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUTPUT_LED_Pin;
 80020b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ba:	2301      	movs	r3, #1
 80020bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	2302      	movs	r3, #2
 80020c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUTPUT_LED_GPIO_Port, &GPIO_InitStruct);
 80020c6:	f107 0310 	add.w	r3, r7, #16
 80020ca:	4619      	mov	r1, r3
 80020cc:	4822      	ldr	r0, [pc, #136]	; (8002158 <MX_GPIO_Init+0x120>)
 80020ce:	f7fe fc1b 	bl	8000908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Motor_Z_A_Pin|Motor_Z_B_Pin|MOTOR_Y_A_Pin|MOTOR_Y_B_Pin;
 80020d2:	233c      	movs	r3, #60	; 0x3c
 80020d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d6:	2301      	movs	r3, #1
 80020d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2302      	movs	r3, #2
 80020e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e2:	f107 0310 	add.w	r3, r7, #16
 80020e6:	4619      	mov	r1, r3
 80020e8:	481c      	ldr	r0, [pc, #112]	; (800215c <MX_GPIO_Init+0x124>)
 80020ea:	f7fe fc0d 	bl	8000908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR_X_A_Pin|MOTOR_X_B_Pin;
 80020ee:	2303      	movs	r3, #3
 80020f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f2:	2301      	movs	r3, #1
 80020f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	2302      	movs	r3, #2
 80020fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fe:	f107 0310 	add.w	r3, r7, #16
 8002102:	4619      	mov	r1, r3
 8002104:	4816      	ldr	r0, [pc, #88]	; (8002160 <MX_GPIO_Init+0x128>)
 8002106:	f7fe fbff 	bl	8000908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_IQR_CLK_Pin;
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <MX_GPIO_Init+0x12c>)
 8002110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PS2_IQR_CLK_GPIO_Port, &GPIO_InitStruct);
 8002116:	f107 0310 	add.w	r3, r7, #16
 800211a:	4619      	mov	r1, r3
 800211c:	4810      	ldr	r0, [pc, #64]	; (8002160 <MX_GPIO_Init+0x128>)
 800211e:	f7fe fbf3 	bl	8000908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_DATA_Pin;
 8002122:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002126:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 8002130:	f107 0310 	add.w	r3, r7, #16
 8002134:	4619      	mov	r1, r3
 8002136:	480a      	ldr	r0, [pc, #40]	; (8002160 <MX_GPIO_Init+0x128>)
 8002138:	f7fe fbe6 	bl	8000908 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800213c:	2200      	movs	r2, #0
 800213e:	2100      	movs	r1, #0
 8002140:	2017      	movs	r0, #23
 8002142:	f7fe fbaa 	bl	800089a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002146:	2017      	movs	r0, #23
 8002148:	f7fe fbc3 	bl	80008d2 <HAL_NVIC_EnableIRQ>

}
 800214c:	bf00      	nop
 800214e:	3720      	adds	r7, #32
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40021000 	.word	0x40021000
 8002158:	40011000 	.word	0x40011000
 800215c:	40010800 	.word	0x40010800
 8002160:	40010c00 	.word	0x40010c00
 8002164:	10110000 	.word	0x10110000

08002168 <interruption>:
void interruption();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void interruption(){
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	ps2interrupt(&keyboard);
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <interruption+0x10>)
 800216e:	f7ff fc4f 	bl	8001a10 <ps2interrupt>
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200000e0 	.word	0x200000e0

0800217c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002182:	f7fe fa2f 	bl	80005e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002186:	f000 f95b 	bl	8002440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800218a:	f7ff ff55 	bl	8002038 <MX_GPIO_Init>
  MX_TIM2_Init();
 800218e:	f000 fa8b 	bl	80026a8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8002192:	f000 fa31 	bl	80025f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002196:	213c      	movs	r1, #60	; 0x3c
 8002198:	489d      	ldr	r0, [pc, #628]	; (8002410 <main+0x294>)
 800219a:	f7ff f9d9 	bl	8001550 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800219e:	213c      	movs	r1, #60	; 0x3c
 80021a0:	489c      	ldr	r0, [pc, #624]	; (8002414 <main+0x298>)
 80021a2:	f7ff f9d5 	bl	8001550 <HAL_TIM_Encoder_Start>

  motorBegin(&motorX, &htim2, MOTOR_X_A_GPIO_Port, MOTOR_X_A_Pin, MOTOR_X_B_GPIO_Port, MOTOR_X_B_Pin);
 80021a6:	2302      	movs	r3, #2
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	4b9b      	ldr	r3, [pc, #620]	; (8002418 <main+0x29c>)
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2301      	movs	r3, #1
 80021b0:	4a99      	ldr	r2, [pc, #612]	; (8002418 <main+0x29c>)
 80021b2:	4998      	ldr	r1, [pc, #608]	; (8002414 <main+0x298>)
 80021b4:	4899      	ldr	r0, [pc, #612]	; (800241c <main+0x2a0>)
 80021b6:	f7ff facd 	bl	8001754 <motorBegin>
  motorBegin(&motorY, &htim1, MOTOR_Y_A_GPIO_Port, MOTOR_Y_A_Pin, MOTOR_Y_B_GPIO_Port, MOTOR_Y_B_Pin);
 80021ba:	2320      	movs	r3, #32
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	4b98      	ldr	r3, [pc, #608]	; (8002420 <main+0x2a4>)
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	2310      	movs	r3, #16
 80021c4:	4a96      	ldr	r2, [pc, #600]	; (8002420 <main+0x2a4>)
 80021c6:	4992      	ldr	r1, [pc, #584]	; (8002410 <main+0x294>)
 80021c8:	4896      	ldr	r0, [pc, #600]	; (8002424 <main+0x2a8>)
 80021ca:	f7ff fac3 	bl	8001754 <motorBegin>

  //motorSimpleBegin(&motorZ, Motor_Z_A_GPIO_Port, Motor_Z_A_Pin, Motor_Z_B_GPIO_Port, Motor_Z_B_Pin);

  keyboardBegin(&keyboard, PS2_DATA_GPIO_Port, PS2_DATA_Pin, PS2_IQR_CLK_GPIO_Port, PS2_IQR_CLK_Pin);
 80021ce:	2380      	movs	r3, #128	; 0x80
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	4b91      	ldr	r3, [pc, #580]	; (8002418 <main+0x29c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	4990      	ldr	r1, [pc, #576]	; (8002418 <main+0x29c>)
 80021d8:	4893      	ldr	r0, [pc, #588]	; (8002428 <main+0x2ac>)
 80021da:	f7ff fe7f 	bl	8001edc <keyboardBegin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Faz a leitura do teclado e envia ao buffer_char
	  		while(1){
	  			if(keyboardAvailable(&keyboard)){
 80021de:	4892      	ldr	r0, [pc, #584]	; (8002428 <main+0x2ac>)
 80021e0:	f7ff fe04 	bl	8001dec <keyboardAvailable>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f9      	beq.n	80021de <main+0x62>
	  				HAL_GPIO_WritePin(OUTPUT_LED_GPIO_Port, OUTPUT_LED_Pin, GPIO_PIN_SET);
 80021ea:	2201      	movs	r2, #1
 80021ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021f0:	488e      	ldr	r0, [pc, #568]	; (800242c <main+0x2b0>)
 80021f2:	f7fe fcfa 	bl	8000bea <HAL_GPIO_WritePin>
	  				HAL_Delay(100);
 80021f6:	2064      	movs	r0, #100	; 0x64
 80021f8:	f7fe fa56 	bl	80006a8 <HAL_Delay>
	  				HAL_GPIO_WritePin(OUTPUT_LED_GPIO_Port, OUTPUT_LED_Pin, GPIO_PIN_RESET);
 80021fc:	2200      	movs	r2, #0
 80021fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002202:	488a      	ldr	r0, [pc, #552]	; (800242c <main+0x2b0>)
 8002204:	f7fe fcf1 	bl	8000bea <HAL_GPIO_WritePin>
	  				uint8_t c = keyboardRead(&keyboard);
 8002208:	4887      	ldr	r0, [pc, #540]	; (8002428 <main+0x2ac>)
 800220a:	f7ff fe24 	bl	8001e56 <keyboardRead>
 800220e:	4603      	mov	r3, r0
 8002210:	71fb      	strb	r3, [r7, #7]
	  				if(c == PS2_ENTER){
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	2b0d      	cmp	r3, #13
 8002216:	d10f      	bne.n	8002238 <main+0xbc>
	  					pressedEnter = 1;
 8002218:	4b85      	ldr	r3, [pc, #532]	; (8002430 <main+0x2b4>)
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]
	  					HAL_GPIO_WritePin(OUTPUT_LED_GPIO_Port, OUTPUT_LED_Pin, GPIO_PIN_SET);
 800221e:	2201      	movs	r2, #1
 8002220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002224:	4881      	ldr	r0, [pc, #516]	; (800242c <main+0x2b0>)
 8002226:	f7fe fce0 	bl	8000bea <HAL_GPIO_WritePin>
	  					break;
 800222a:	bf00      	nop
	  				}
	  				keyboardClear(&keyboard);
	  			}
	  		}
	  		//Programa leitura do teclado
	  		if(pressedEnter){
 800222c:	4b80      	ldr	r3, [pc, #512]	; (8002430 <main+0x2b4>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80df 	beq.w	80023f4 <main+0x278>
 8002236:	e026      	b.n	8002286 <main+0x10a>
	  				}else if(c == PS2_DOWNARROW){
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	2b0a      	cmp	r3, #10
 800223c:	d107      	bne.n	800224e <main+0xd2>
	  					updateAxis(&motorY, motorY.setPoint - 50);
 800223e:	4b79      	ldr	r3, [pc, #484]	; (8002424 <main+0x2a8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	3b32      	subs	r3, #50	; 0x32
 8002244:	4619      	mov	r1, r3
 8002246:	4877      	ldr	r0, [pc, #476]	; (8002424 <main+0x2a8>)
 8002248:	f7ff fae4 	bl	8001814 <updateAxis>
 800224c:	e017      	b.n	800227e <main+0x102>
	  				}else if(c == PS2_UPARROW){
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	2b0b      	cmp	r3, #11
 8002252:	d107      	bne.n	8002264 <main+0xe8>
	  					updateAxis(&motorY, motorY.setPoint + 50);
 8002254:	4b73      	ldr	r3, [pc, #460]	; (8002424 <main+0x2a8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	3332      	adds	r3, #50	; 0x32
 800225a:	4619      	mov	r1, r3
 800225c:	4871      	ldr	r0, [pc, #452]	; (8002424 <main+0x2a8>)
 800225e:	f7ff fad9 	bl	8001814 <updateAxis>
 8002262:	e00c      	b.n	800227e <main+0x102>
	  				}else if(c == PS2_BACKSPACE){
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	2b7f      	cmp	r3, #127	; 0x7f
 8002268:	d103      	bne.n	8002272 <main+0xf6>
	  					clearBuffer(buffer_char);
 800226a:	4872      	ldr	r0, [pc, #456]	; (8002434 <main+0x2b8>)
 800226c:	f7ff fed8 	bl	8002020 <clearBuffer>
 8002270:	e005      	b.n	800227e <main+0x102>
	  					feedBuffer(buffer_char, MAX_CARACTERES, c);
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	461a      	mov	r2, r3
 8002276:	211e      	movs	r1, #30
 8002278:	486e      	ldr	r0, [pc, #440]	; (8002434 <main+0x2b8>)
 800227a:	f7ff feaf 	bl	8001fdc <feedBuffer>
	  				keyboardClear(&keyboard);
 800227e:	486a      	ldr	r0, [pc, #424]	; (8002428 <main+0x2ac>)
 8002280:	f7ff fdd8 	bl	8001e34 <keyboardClear>
	  			if(keyboardAvailable(&keyboard)){
 8002284:	e7ab      	b.n	80021de <main+0x62>
	  			//reverse(buffer_char);
	  			uint32_t length = strlen((const char*)buffer_char);
 8002286:	486b      	ldr	r0, [pc, #428]	; (8002434 <main+0x2b8>)
 8002288:	f7fd ff60 	bl	800014c <strlen>
 800228c:	6038      	str	r0, [r7, #0]

	  			for(int j=0;j<3;j++){
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	e09c      	b.n	80023ce <main+0x252>

	  				//Imprime as linhas em braille
	  				if(j==1){
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d14a      	bne.n	8002330 <main+0x1b4>
	  					//Linhas das matrizes
	  					for(int8_t i=length-1; i>=0; --i){
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	3b01      	subs	r3, #1
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	72fb      	strb	r3, [r7, #11]
 80022a4:	e038      	b.n	8002318 <main+0x19c>

	  						// Recebe os pontos da linha para o caractere atual
	  						fillLineWithBraille(buffer_braille, j,buffer_char[i]);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	b2d9      	uxtb	r1, r3
 80022aa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80022ae:	4a61      	ldr	r2, [pc, #388]	; (8002434 <main+0x2b8>)
 80022b0:	5cd3      	ldrb	r3, [r2, r3]
 80022b2:	461a      	mov	r2, r3
 80022b4:	4860      	ldr	r0, [pc, #384]	; (8002438 <main+0x2bc>)
 80022b6:	f7ff fe41 	bl	8001f3c <fillLineWithBraille>

	  						// Percorre os 4 bits, no máximo, para cada caractere
	  						for(int8_t x = 0; x < 2; ++x){
 80022ba:	2300      	movs	r3, #0
 80022bc:	72bb      	strb	r3, [r7, #10]
 80022be:	e018      	b.n	80022f2 <main+0x176>

	  							// Passa para a próxima iteração se não tem ponto para furar
	  							if(buffer_braille[x] == '1'){
 80022c0:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80022c4:	4a5c      	ldr	r2, [pc, #368]	; (8002438 <main+0x2bc>)
 80022c6:	5cd3      	ldrb	r3, [r2, r3]
 80022c8:	2b31      	cmp	r3, #49	; 0x31
 80022ca:	d103      	bne.n	80022d4 <main+0x158>
	  								pierce(&motorZ, PIERCE_TIME);
 80022cc:	2164      	movs	r1, #100	; 0x64
 80022ce:	485b      	ldr	r0, [pc, #364]	; (800243c <main+0x2c0>)
 80022d0:	f7ff fb8a 	bl	80019e8 <pierce>
	  							}

	  							if(x != 1){
 80022d4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d006      	beq.n	80022ea <main+0x16e>
	  								updateAxis(&motorX, motorX.setPoint - DELTA_COL_LIN);
 80022dc:	4b4f      	ldr	r3, [pc, #316]	; (800241c <main+0x2a0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	3b0b      	subs	r3, #11
 80022e2:	4619      	mov	r1, r3
 80022e4:	484d      	ldr	r0, [pc, #308]	; (800241c <main+0x2a0>)
 80022e6:	f7ff fa95 	bl	8001814 <updateAxis>
	  						for(int8_t x = 0; x < 2; ++x){
 80022ea:	7abb      	ldrb	r3, [r7, #10]
 80022ec:	3301      	adds	r3, #1
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	72bb      	strb	r3, [r7, #10]
 80022f2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	dde2      	ble.n	80022c0 <main+0x144>
	  							// Incrementa posição do eixo x, espaçamento entre colunas

	  						}

	  						// Incrementa posição do eixo x, espaçamento entre char na horizontal
	  						if(i != 0){
 80022fa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d006      	beq.n	8002310 <main+0x194>
	  							updateAxis(&motorX, motorX.setPoint - DELTA_CHAR_H);
 8002302:	4b46      	ldr	r3, [pc, #280]	; (800241c <main+0x2a0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	3b08      	subs	r3, #8
 8002308:	4619      	mov	r1, r3
 800230a:	4844      	ldr	r0, [pc, #272]	; (800241c <main+0x2a0>)
 800230c:	f7ff fa82 	bl	8001814 <updateAxis>
	  					for(int8_t i=length-1; i>=0; --i){
 8002310:	7afb      	ldrb	r3, [r7, #11]
 8002312:	3b01      	subs	r3, #1
 8002314:	b2db      	uxtb	r3, r3
 8002316:	72fb      	strb	r3, [r7, #11]
 8002318:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800231c:	2b00      	cmp	r3, #0
 800231e:	dac2      	bge.n	80022a6 <main+0x12a>


	  					}

	  					// Decrementa posição do eixo y, espaçamento entre linhas
	  					updateAxis(&motorY, motorY.setPoint - DELTA_COL_LIN);
 8002320:	4b40      	ldr	r3, [pc, #256]	; (8002424 <main+0x2a8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	3b0b      	subs	r3, #11
 8002326:	4619      	mov	r1, r3
 8002328:	483e      	ldr	r0, [pc, #248]	; (8002424 <main+0x2a8>)
 800232a:	f7ff fa73 	bl	8001814 <updateAxis>
 800232e:	e04b      	b.n	80023c8 <main+0x24c>
	  					//updateAxis_Simple(&motorY, NEXT_LINE, UP);
	  				}else{

	  					//Linhas das matrizes
	  					for(int8_t i=0; i<length; i++){
 8002330:	2300      	movs	r3, #0
 8002332:	727b      	strb	r3, [r7, #9]
 8002334:	e03c      	b.n	80023b0 <main+0x234>

	  						//Recebe os pontos da linha para o caractere atual
	  						fillLineWithBraille(buffer_braille, j,buffer_char[i]);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	b2d9      	uxtb	r1, r3
 800233a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800233e:	4a3d      	ldr	r2, [pc, #244]	; (8002434 <main+0x2b8>)
 8002340:	5cd3      	ldrb	r3, [r2, r3]
 8002342:	461a      	mov	r2, r3
 8002344:	483c      	ldr	r0, [pc, #240]	; (8002438 <main+0x2bc>)
 8002346:	f7ff fdf9 	bl	8001f3c <fillLineWithBraille>

	  						//Percorre os 4 bits, no máximo, para cada caractere
	  						for(int8_t x = 1; x >= 0; --x){
 800234a:	2301      	movs	r3, #1
 800234c:	723b      	strb	r3, [r7, #8]
 800234e:	e018      	b.n	8002382 <main+0x206>

	  							if(buffer_braille[x] == '1'){
 8002350:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002354:	4a38      	ldr	r2, [pc, #224]	; (8002438 <main+0x2bc>)
 8002356:	5cd3      	ldrb	r3, [r2, r3]
 8002358:	2b31      	cmp	r3, #49	; 0x31
 800235a:	d103      	bne.n	8002364 <main+0x1e8>
	  								pierce(&motorZ, PIERCE_TIME);
 800235c:	2164      	movs	r1, #100	; 0x64
 800235e:	4837      	ldr	r0, [pc, #220]	; (800243c <main+0x2c0>)
 8002360:	f7ff fb42 	bl	80019e8 <pierce>
	  							}

	  							// Incrementa posição do eixo x, espaçamento entre colunas
	  							if(x != 0){
 8002364:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d006      	beq.n	800237a <main+0x1fe>
	  								updateAxis(&motorX, motorX.setPoint + DELTA_COL_LIN);
 800236c:	4b2b      	ldr	r3, [pc, #172]	; (800241c <main+0x2a0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	330b      	adds	r3, #11
 8002372:	4619      	mov	r1, r3
 8002374:	4829      	ldr	r0, [pc, #164]	; (800241c <main+0x2a0>)
 8002376:	f7ff fa4d 	bl	8001814 <updateAxis>
	  						for(int8_t x = 1; x >= 0; --x){
 800237a:	7a3b      	ldrb	r3, [r7, #8]
 800237c:	3b01      	subs	r3, #1
 800237e:	b2db      	uxtb	r3, r3
 8002380:	723b      	strb	r3, [r7, #8]
 8002382:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	dae2      	bge.n	8002350 <main+0x1d4>


	  						}

	  						// Incrementa posição do eixo x, espaçamento entre char na horizontal
	  						if(i != (length -1)){
 800238a:	f997 2009 	ldrsb.w	r2, [r7, #9]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	3b01      	subs	r3, #1
 8002392:	429a      	cmp	r2, r3
 8002394:	d006      	beq.n	80023a4 <main+0x228>
	  							updateAxis(&motorX, motorX.setPoint + DELTA_CHAR_H);
 8002396:	4b21      	ldr	r3, [pc, #132]	; (800241c <main+0x2a0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	3308      	adds	r3, #8
 800239c:	4619      	mov	r1, r3
 800239e:	481f      	ldr	r0, [pc, #124]	; (800241c <main+0x2a0>)
 80023a0:	f7ff fa38 	bl	8001814 <updateAxis>
	  					for(int8_t i=0; i<length; i++){
 80023a4:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	3301      	adds	r3, #1
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	727b      	strb	r3, [r7, #9]
 80023b0:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d8bd      	bhi.n	8002336 <main+0x1ba>


	  					}

	  					// Incrementa posição do eixo y, espaçamento entre linhas
	  					updateAxis(&motorY, motorY.setPoint + DELTA_COL_LIN);
 80023ba:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <main+0x2a8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	330b      	adds	r3, #11
 80023c0:	4619      	mov	r1, r3
 80023c2:	4818      	ldr	r0, [pc, #96]	; (8002424 <main+0x2a8>)
 80023c4:	f7ff fa26 	bl	8001814 <updateAxis>
	  			for(int j=0;j<3;j++){
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	3301      	adds	r3, #1
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	f77f af5f 	ble.w	8002294 <main+0x118>
	  					//updateAxis_Simple(&motorY, NEXT_LINE, UP);
	  				}
	  			}

	  			//Incrementa posição do eixo y, espaçamento entre char na vertical
	  			updateAxis(&motorY, motorY.setPoint + DELTA_CHAR_V - DELTA_COL_LIN);
 80023d6:	4b13      	ldr	r3, [pc, #76]	; (8002424 <main+0x2a8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	3303      	adds	r3, #3
 80023dc:	4619      	mov	r1, r3
 80023de:	4811      	ldr	r0, [pc, #68]	; (8002424 <main+0x2a8>)
 80023e0:	f7ff fa18 	bl	8001814 <updateAxis>
	  			//updateAxis_Simple(&motorY, NEXT_CHAR, UP);
	  			// Seta posição eixo x para inicial
	  			updateAxis(&motorX, POS_INI);
 80023e4:	f646 5160 	movw	r1, #28000	; 0x6d60
 80023e8:	480c      	ldr	r0, [pc, #48]	; (800241c <main+0x2a0>)
 80023ea:	f7ff fa13 	bl	8001814 <updateAxis>

	  			pressedEnter = 0;
 80023ee:	4b10      	ldr	r3, [pc, #64]	; (8002430 <main+0x2b4>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]
	  		}
	  		HAL_GPIO_WritePin(OUTPUT_LED_GPIO_Port, OUTPUT_LED_Pin, GPIO_PIN_RESET);
 80023f4:	2200      	movs	r2, #0
 80023f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023fa:	480c      	ldr	r0, [pc, #48]	; (800242c <main+0x2b0>)
 80023fc:	f7fe fbf5 	bl	8000bea <HAL_GPIO_WritePin>
	  		keyboardClear(&keyboard);
 8002400:	4809      	ldr	r0, [pc, #36]	; (8002428 <main+0x2ac>)
 8002402:	f7ff fd17 	bl	8001e34 <keyboardClear>
	  		clearBuffer(buffer_char);
 8002406:	480b      	ldr	r0, [pc, #44]	; (8002434 <main+0x2b8>)
 8002408:	f7ff fe0a 	bl	8002020 <clearBuffer>
  while (1)
 800240c:	e6e7      	b.n	80021de <main+0x62>
 800240e:	bf00      	nop
 8002410:	20000190 	.word	0x20000190
 8002414:	200001d0 	.word	0x200001d0
 8002418:	40010c00 	.word	0x40010c00
 800241c:	20000154 	.word	0x20000154
 8002420:	40010800 	.word	0x40010800
 8002424:	20000174 	.word	0x20000174
 8002428:	200000e0 	.word	0x200000e0
 800242c:	40011000 	.word	0x40011000
 8002430:	200000b0 	.word	0x200000b0
 8002434:	20000124 	.word	0x20000124
 8002438:	20000170 	.word	0x20000170
 800243c:	20000144 	.word	0x20000144

08002440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b090      	sub	sp, #64	; 0x40
 8002444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002446:	f107 0318 	add.w	r3, r7, #24
 800244a:	2228      	movs	r2, #40	; 0x28
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f000 fa60 	bl	8002914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]
 800245c:	609a      	str	r2, [r3, #8]
 800245e:	60da      	str	r2, [r3, #12]
 8002460:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002462:	2302      	movs	r3, #2
 8002464:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002466:	2301      	movs	r3, #1
 8002468:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800246a:	2310      	movs	r3, #16
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800246e:	2300      	movs	r3, #0
 8002470:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002472:	f107 0318 	add.w	r3, r7, #24
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe fbf2 	bl	8000c60 <HAL_RCC_OscConfig>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8002482:	f000 f818 	bl	80024b6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002486:	230f      	movs	r3, #15
 8002488:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800249a:	1d3b      	adds	r3, r7, #4
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe fe5e 	bl	8001160 <HAL_RCC_ClockConfig>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80024aa:	f000 f804 	bl	80024b6 <Error_Handler>
  }
}
 80024ae:	bf00      	nop
 80024b0:	3740      	adds	r7, #64	; 0x40
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr
	...

080024c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024ca:	4b15      	ldr	r3, [pc, #84]	; (8002520 <HAL_MspInit+0x5c>)
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	4a14      	ldr	r2, [pc, #80]	; (8002520 <HAL_MspInit+0x5c>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	6193      	str	r3, [r2, #24]
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_MspInit+0x5c>)
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	60bb      	str	r3, [r7, #8]
 80024e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024e2:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <HAL_MspInit+0x5c>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	4a0e      	ldr	r2, [pc, #56]	; (8002520 <HAL_MspInit+0x5c>)
 80024e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ec:	61d3      	str	r3, [r2, #28]
 80024ee:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <HAL_MspInit+0x5c>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f6:	607b      	str	r3, [r7, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <HAL_MspInit+0x60>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	4a04      	ldr	r2, [pc, #16]	; (8002524 <HAL_MspInit+0x60>)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002516:	bf00      	nop
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr
 8002520:	40021000 	.word	0x40021000
 8002524:	40010000 	.word	0x40010000

08002528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002538:	e7fe      	b.n	8002538 <HardFault_Handler+0x4>

0800253a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800253e:	e7fe      	b.n	800253e <MemManage_Handler+0x4>

08002540 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002544:	e7fe      	b.n	8002544 <BusFault_Handler+0x4>

08002546 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800254a:	e7fe      	b.n	800254a <UsageFault_Handler+0x4>

0800254c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr

08002558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002574:	f7fe f87c 	bl	8000670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}

0800257c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	interruption();
 8002580:	f7ff fdf2 	bl	8002168 <interruption>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002584:	2080      	movs	r0, #128	; 0x80
 8002586:	f7fe fb49 	bl	8000c1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002594:	4b15      	ldr	r3, [pc, #84]	; (80025ec <SystemInit+0x5c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a14      	ldr	r2, [pc, #80]	; (80025ec <SystemInit+0x5c>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80025a0:	4b12      	ldr	r3, [pc, #72]	; (80025ec <SystemInit+0x5c>)
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	4911      	ldr	r1, [pc, #68]	; (80025ec <SystemInit+0x5c>)
 80025a6:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <SystemInit+0x60>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80025ac:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <SystemInit+0x5c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0e      	ldr	r2, [pc, #56]	; (80025ec <SystemInit+0x5c>)
 80025b2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80025b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025bc:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <SystemInit+0x5c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <SystemInit+0x5c>)
 80025c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80025c8:	4b08      	ldr	r3, [pc, #32]	; (80025ec <SystemInit+0x5c>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	4a07      	ldr	r2, [pc, #28]	; (80025ec <SystemInit+0x5c>)
 80025ce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80025d2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <SystemInit+0x5c>)
 80025d6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80025da:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <SystemInit+0x64>)
 80025de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025e2:	609a      	str	r2, [r3, #8]
#endif 
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	40021000 	.word	0x40021000
 80025f0:	f8ff0000 	.word	0xf8ff0000
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08c      	sub	sp, #48	; 0x30
 80025fc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80025fe:	f107 030c 	add.w	r3, r7, #12
 8002602:	2224      	movs	r2, #36	; 0x24
 8002604:	2100      	movs	r1, #0
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f984 	bl	8002914 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8002614:	4b22      	ldr	r3, [pc, #136]	; (80026a0 <MX_TIM1_Init+0xa8>)
 8002616:	4a23      	ldr	r2, [pc, #140]	; (80026a4 <MX_TIM1_Init+0xac>)
 8002618:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800261a:	4b21      	ldr	r3, [pc, #132]	; (80026a0 <MX_TIM1_Init+0xa8>)
 800261c:	2200      	movs	r2, #0
 800261e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002620:	4b1f      	ldr	r3, [pc, #124]	; (80026a0 <MX_TIM1_Init+0xa8>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002626:	4b1e      	ldr	r3, [pc, #120]	; (80026a0 <MX_TIM1_Init+0xa8>)
 8002628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800262c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800262e:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <MX_TIM1_Init+0xa8>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002634:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <MX_TIM1_Init+0xa8>)
 8002636:	2200      	movs	r2, #0
 8002638:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800263a:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <MX_TIM1_Init+0xa8>)
 800263c:	2200      	movs	r2, #0
 800263e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002640:	2301      	movs	r3, #1
 8002642:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002644:	2300      	movs	r3, #0
 8002646:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002648:	2301      	movs	r3, #1
 800264a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800264c:	2300      	movs	r3, #0
 800264e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002654:	2300      	movs	r3, #0
 8002656:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002658:	2301      	movs	r3, #1
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800265c:	2300      	movs	r3, #0
 800265e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002664:	f107 030c 	add.w	r3, r7, #12
 8002668:	4619      	mov	r1, r3
 800266a:	480d      	ldr	r0, [pc, #52]	; (80026a0 <MX_TIM1_Init+0xa8>)
 800266c:	f7fe fee2 	bl	8001434 <HAL_TIM_Encoder_Init>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002676:	f7ff ff1e 	bl	80024b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800267a:	2300      	movs	r3, #0
 800267c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800267e:	2300      	movs	r3, #0
 8002680:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002682:	1d3b      	adds	r3, r7, #4
 8002684:	4619      	mov	r1, r3
 8002686:	4806      	ldr	r0, [pc, #24]	; (80026a0 <MX_TIM1_Init+0xa8>)
 8002688:	f7ff f820 	bl	80016cc <HAL_TIMEx_MasterConfigSynchronization>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002692:	f7ff ff10 	bl	80024b6 <Error_Handler>
  }

}
 8002696:	bf00      	nop
 8002698:	3730      	adds	r7, #48	; 0x30
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000190 	.word	0x20000190
 80026a4:	40012c00 	.word	0x40012c00

080026a8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08c      	sub	sp, #48	; 0x30
 80026ac:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80026ae:	f107 030c 	add.w	r3, r7, #12
 80026b2:	2224      	movs	r2, #36	; 0x24
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f92c 	bl	8002914 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80026c4:	4b21      	ldr	r3, [pc, #132]	; (800274c <MX_TIM2_Init+0xa4>)
 80026c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80026cc:	4b1f      	ldr	r3, [pc, #124]	; (800274c <MX_TIM2_Init+0xa4>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d2:	4b1e      	ldr	r3, [pc, #120]	; (800274c <MX_TIM2_Init+0xa4>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80026d8:	4b1c      	ldr	r3, [pc, #112]	; (800274c <MX_TIM2_Init+0xa4>)
 80026da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e0:	4b1a      	ldr	r3, [pc, #104]	; (800274c <MX_TIM2_Init+0xa4>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e6:	4b19      	ldr	r3, [pc, #100]	; (800274c <MX_TIM2_Init+0xa4>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80026ec:	2301      	movs	r3, #1
 80026ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026f0:	2300      	movs	r3, #0
 80026f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026f4:	2301      	movs	r3, #1
 80026f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002700:	2300      	movs	r3, #0
 8002702:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002704:	2301      	movs	r3, #1
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002708:	2300      	movs	r3, #0
 800270a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002710:	f107 030c 	add.w	r3, r7, #12
 8002714:	4619      	mov	r1, r3
 8002716:	480d      	ldr	r0, [pc, #52]	; (800274c <MX_TIM2_Init+0xa4>)
 8002718:	f7fe fe8c 	bl	8001434 <HAL_TIM_Encoder_Init>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002722:	f7ff fec8 	bl	80024b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002726:	2300      	movs	r3, #0
 8002728:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	4619      	mov	r1, r3
 8002732:	4806      	ldr	r0, [pc, #24]	; (800274c <MX_TIM2_Init+0xa4>)
 8002734:	f7fe ffca 	bl	80016cc <HAL_TIMEx_MasterConfigSynchronization>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800273e:	f7ff feba 	bl	80024b6 <Error_Handler>
  }

}
 8002742:	bf00      	nop
 8002744:	3730      	adds	r7, #48	; 0x30
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	200001d0 	.word	0x200001d0

08002750 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08c      	sub	sp, #48	; 0x30
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 031c 	add.w	r3, r7, #28
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a40      	ldr	r2, [pc, #256]	; (800286c <HAL_TIM_Encoder_MspInit+0x11c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d125      	bne.n	80027bc <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002770:	4b3f      	ldr	r3, [pc, #252]	; (8002870 <HAL_TIM_Encoder_MspInit+0x120>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	4a3e      	ldr	r2, [pc, #248]	; (8002870 <HAL_TIM_Encoder_MspInit+0x120>)
 8002776:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800277a:	6193      	str	r3, [r2, #24]
 800277c:	4b3c      	ldr	r3, [pc, #240]	; (8002870 <HAL_TIM_Encoder_MspInit+0x120>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002784:	61bb      	str	r3, [r7, #24]
 8002786:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002788:	4b39      	ldr	r3, [pc, #228]	; (8002870 <HAL_TIM_Encoder_MspInit+0x120>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	4a38      	ldr	r2, [pc, #224]	; (8002870 <HAL_TIM_Encoder_MspInit+0x120>)
 800278e:	f043 0304 	orr.w	r3, r3, #4
 8002792:	6193      	str	r3, [r2, #24]
 8002794:	4b36      	ldr	r3, [pc, #216]	; (8002870 <HAL_TIM_Encoder_MspInit+0x120>)
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = ENCODER_Y_A_Pin|ENCODER_Y_B_Pin;
 80027a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a6:	2300      	movs	r3, #0
 80027a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ae:	f107 031c 	add.w	r3, r7, #28
 80027b2:	4619      	mov	r1, r3
 80027b4:	482f      	ldr	r0, [pc, #188]	; (8002874 <HAL_TIM_Encoder_MspInit+0x124>)
 80027b6:	f7fe f8a7 	bl	8000908 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80027ba:	e053      	b.n	8002864 <HAL_TIM_Encoder_MspInit+0x114>
  else if(tim_encoderHandle->Instance==TIM2)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c4:	d14e      	bne.n	8002864 <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027c6:	4b2a      	ldr	r3, [pc, #168]	; (8002870 <HAL_TIM_Encoder_MspInit+0x120>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	4a29      	ldr	r2, [pc, #164]	; (8002870 <HAL_TIM_Encoder_MspInit+0x120>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	61d3      	str	r3, [r2, #28]
 80027d2:	4b27      	ldr	r3, [pc, #156]	; (8002870 <HAL_TIM_Encoder_MspInit+0x120>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027de:	4b24      	ldr	r3, [pc, #144]	; (8002870 <HAL_TIM_Encoder_MspInit+0x120>)
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	4a23      	ldr	r2, [pc, #140]	; (8002870 <HAL_TIM_Encoder_MspInit+0x120>)
 80027e4:	f043 0304 	orr.w	r3, r3, #4
 80027e8:	6193      	str	r3, [r2, #24]
 80027ea:	4b21      	ldr	r3, [pc, #132]	; (8002870 <HAL_TIM_Encoder_MspInit+0x120>)
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f6:	4b1e      	ldr	r3, [pc, #120]	; (8002870 <HAL_TIM_Encoder_MspInit+0x120>)
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	4a1d      	ldr	r2, [pc, #116]	; (8002870 <HAL_TIM_Encoder_MspInit+0x120>)
 80027fc:	f043 0308 	orr.w	r3, r3, #8
 8002800:	6193      	str	r3, [r2, #24]
 8002802:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <HAL_TIM_Encoder_MspInit+0x120>)
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_X_A_Pin;
 800280e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002814:	2300      	movs	r3, #0
 8002816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENCODER_X_A_GPIO_Port, &GPIO_InitStruct);
 800281c:	f107 031c 	add.w	r3, r7, #28
 8002820:	4619      	mov	r1, r3
 8002822:	4814      	ldr	r0, [pc, #80]	; (8002874 <HAL_TIM_Encoder_MspInit+0x124>)
 8002824:	f7fe f870 	bl	8000908 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_X_B_Pin;
 8002828:	2308      	movs	r3, #8
 800282a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800282c:	2300      	movs	r3, #0
 800282e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENCODER_X_B_GPIO_Port, &GPIO_InitStruct);
 8002834:	f107 031c 	add.w	r3, r7, #28
 8002838:	4619      	mov	r1, r3
 800283a:	480f      	ldr	r0, [pc, #60]	; (8002878 <HAL_TIM_Encoder_MspInit+0x128>)
 800283c:	f7fe f864 	bl	8000908 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002840:	4b0e      	ldr	r3, [pc, #56]	; (800287c <HAL_TIM_Encoder_MspInit+0x12c>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800284e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002850:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800285e:	4a07      	ldr	r2, [pc, #28]	; (800287c <HAL_TIM_Encoder_MspInit+0x12c>)
 8002860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002862:	6053      	str	r3, [r2, #4]
}
 8002864:	bf00      	nop
 8002866:	3730      	adds	r7, #48	; 0x30
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40012c00 	.word	0x40012c00
 8002870:	40021000 	.word	0x40021000
 8002874:	40010800 	.word	0x40010800
 8002878:	40010c00 	.word	0x40010c00
 800287c:	40010000 	.word	0x40010000

08002880 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002880:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002882:	e003      	b.n	800288c <LoopCopyDataInit>

08002884 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002886:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002888:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800288a:	3104      	adds	r1, #4

0800288c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800288c:	480a      	ldr	r0, [pc, #40]	; (80028b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800288e:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002890:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002892:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002894:	d3f6      	bcc.n	8002884 <CopyDataInit>
  ldr r2, =_sbss
 8002896:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002898:	e002      	b.n	80028a0 <LoopFillZerobss>

0800289a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800289a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800289c:	f842 3b04 	str.w	r3, [r2], #4

080028a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80028a0:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80028a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80028a4:	d3f9      	bcc.n	800289a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028a6:	f7ff fe73 	bl	8002590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028aa:	f000 f80f 	bl	80028cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028ae:	f7ff fc65 	bl	800217c <main>
  bx lr
 80028b2:	4770      	bx	lr
  ldr r3, =_sidata
 80028b4:	08002a7c 	.word	0x08002a7c
  ldr r0, =_sdata
 80028b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80028bc:	200000b8 	.word	0x200000b8
  ldr r2, =_sbss
 80028c0:	200000b8 	.word	0x200000b8
  ldr r3, = _ebss
 80028c4:	20000210 	.word	0x20000210

080028c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028c8:	e7fe      	b.n	80028c8 <ADC1_2_IRQHandler>
	...

080028cc <__libc_init_array>:
 80028cc:	b570      	push	{r4, r5, r6, lr}
 80028ce:	2500      	movs	r5, #0
 80028d0:	4e0c      	ldr	r6, [pc, #48]	; (8002904 <__libc_init_array+0x38>)
 80028d2:	4c0d      	ldr	r4, [pc, #52]	; (8002908 <__libc_init_array+0x3c>)
 80028d4:	1ba4      	subs	r4, r4, r6
 80028d6:	10a4      	asrs	r4, r4, #2
 80028d8:	42a5      	cmp	r5, r4
 80028da:	d109      	bne.n	80028f0 <__libc_init_array+0x24>
 80028dc:	f000 f822 	bl	8002924 <_init>
 80028e0:	2500      	movs	r5, #0
 80028e2:	4e0a      	ldr	r6, [pc, #40]	; (800290c <__libc_init_array+0x40>)
 80028e4:	4c0a      	ldr	r4, [pc, #40]	; (8002910 <__libc_init_array+0x44>)
 80028e6:	1ba4      	subs	r4, r4, r6
 80028e8:	10a4      	asrs	r4, r4, #2
 80028ea:	42a5      	cmp	r5, r4
 80028ec:	d105      	bne.n	80028fa <__libc_init_array+0x2e>
 80028ee:	bd70      	pop	{r4, r5, r6, pc}
 80028f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028f4:	4798      	blx	r3
 80028f6:	3501      	adds	r5, #1
 80028f8:	e7ee      	b.n	80028d8 <__libc_init_array+0xc>
 80028fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028fe:	4798      	blx	r3
 8002900:	3501      	adds	r5, #1
 8002902:	e7f2      	b.n	80028ea <__libc_init_array+0x1e>
 8002904:	08002a74 	.word	0x08002a74
 8002908:	08002a74 	.word	0x08002a74
 800290c:	08002a74 	.word	0x08002a74
 8002910:	08002a78 	.word	0x08002a78

08002914 <memset>:
 8002914:	4603      	mov	r3, r0
 8002916:	4402      	add	r2, r0
 8002918:	4293      	cmp	r3, r2
 800291a:	d100      	bne.n	800291e <memset+0xa>
 800291c:	4770      	bx	lr
 800291e:	f803 1b01 	strb.w	r1, [r3], #1
 8002922:	e7f9      	b.n	8002918 <memset+0x4>

08002924 <_init>:
 8002924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002926:	bf00      	nop
 8002928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800292a:	bc08      	pop	{r3}
 800292c:	469e      	mov	lr, r3
 800292e:	4770      	bx	lr

08002930 <_fini>:
 8002930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002932:	bf00      	nop
 8002934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002936:	bc08      	pop	{r3}
 8002938:	469e      	mov	lr, r3
 800293a:	4770      	bx	lr
